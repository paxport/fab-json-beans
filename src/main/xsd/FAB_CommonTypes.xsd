<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2007 (http://www.altova.com) by Craig Goodyer (Multicom Products Ltd) -->
<xs:schema xmlns="http://www.xmltravel.com/fab/2002/09" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.xmltravel.com/fab/2002/09" elementFormDefault="qualified" version="1.105">
	<xs:include schemaLocation="FAB_SimpleTypes.xsd"/>
	<xs:include schemaLocation="FAB_FormattedContent.xsd"/>
	<xs:group name="FilterGroup">
		<xs:choice>
			<xs:element name="AccommodationFilterCriteria" type="AccommodationSearchFilter" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Details the criteria against which the result set should be filtered</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="FlightFilterCriteria" type="FlightSearchFilter" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Details the criteria against which the result set should be filtered</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:complexType name="ResultSetRequest">
		<xs:annotation>
			<xs:documentation>Requests a new View into a ResultSet that has already been created by a previous HolidaySearchRequest</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="FilterGroup" minOccurs="0"/>
			<xs:element name="Preferences" type="ResultSetInfo" minOccurs="0"/>
			<xs:element name="ViewInfo" type="ResultSetViewInfo"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationPreferences">
		<xs:annotation>
			<xs:documentation>Can contain a list of board codes and/or a list of class codes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ClassCodes" type="ClassCodeList" minOccurs="0"/>
			<xs:element name="BoardCodes" type="BoardCodeList" minOccurs="0"/>
			<xs:element name="BoardCodesAndClassCodesSpread" type="BoardCodesAndClassCodesSpreadList" minOccurs="0"/>
			<xs:element name="AccommodationAttributes" type="AccommodationAttributeList" minOccurs="0"/>
			<xs:element name="Brochures" type="BrochureList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="PropertyName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">If you want to search by accommodation name, use this. You should use % to indicate wild cards but please don't send in '% Hotel'!</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BrochureList">
		<xs:annotation>
			<xs:documentation>A list of brochure codes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Brochure" type="xs:string" minOccurs="0" maxOccurs="9"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ClassCodeList">
		<xs:annotation>
			<xs:documentation>A list of 2 character class codes (e.g. 2*, 3* etc)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ClassCode" type="AccommodationClassCode" minOccurs="0" maxOccurs="9"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BoardCodeList">
		<xs:annotation>
			<xs:documentation>A list of 2 letter board codes (e.g. Half Board = HB)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BoardCode" type="MealPlanCode" minOccurs="0" maxOccurs="10"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationAttributeList">
		<xs:annotation>
			<xs:documentation>List of AccommodationAttributes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Attribute" type="AccommodationAttribute" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierList">
		<xs:annotation>
			<xs:documentation>A list of 2 or 3 letter FAB supplier codes (e.g. Thomson = THO)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Supplier" type="SupplierCode" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AirportList">
		<xs:annotation>
			<xs:documentation>A list of 3 letter IATA Airport codes (e.g.Malaga = AGP)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Airport" type="TravelPointCode" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruisePortList">
		<xs:sequence>
			<xs:element name="PortCode" type="PortCode" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="StarRatingList">
		<xs:annotation>
			<xs:documentation>A list of FAB Star Ratings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="StarRating" type="AccommodationClassCode" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BoardCodesAndClassCodesSpreadList">
		<xs:annotation>
			<xs:documentation>A list of BoardCodesAndClassCodeEntries</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BoardCodesAndClassCodeEntry" type="BoardCodesAndClassCodeEntry" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BoardCodesAndClassCodeEntry">
		<xs:annotation>
			<xs:documentation>A entry consisting of a BoardCode, a ClassCode and a percentage weight</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BoardCode" type="MealPlanCode"/>
			<xs:element name="ClassCode" type="AccommodationClassCode"/>
		</xs:sequence>
		<xs:attribute name="Percentage" type="xs:nonNegativeInteger" use="required"/>
	</xs:complexType>
	<xs:complexType name="MealPlanCodeList">
		<xs:annotation>
			<xs:documentation>A list of FAB Meal Plan Codes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BoardBasis" type="MealPlanCode" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PropertyNameList">
		<xs:annotation>
			<xs:documentation>A list of FAB property Names</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PropertyName" type="xs:string" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ResortIdList">
		<xs:annotation>
			<xs:documentation>A list of FAB resort Ids</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ResortId" type="xs:string" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ExpandResortIdListToIncludeChildren" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ResortNameList">
		<xs:annotation>
			<xs:documentation>A list of resort names</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ResortName" type="xs:string" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CountryList">
		<xs:annotation>
			<xs:documentation>A list of 2 letter country codes. (e.g. Spain = ES)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Country" type="ISO3166" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DestinationChoice">
		<xs:annotation>
			<xs:documentation>Defines a choice of destination types. You can search for holidays by specifying ONE of the following: 1) a list of destination airports, 2) a list of FAB ResortIds, 3) a list of resort names or 4) a list of countries</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="DestinationAirports" type="AirportList"/>
			<xs:element name="DestinationResortIds" type="ResortIdList"/>
			<xs:element name="DestinationCountries" type="CountryList"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="PerPersonCostConstraints">
		<xs:annotation>
			<xs:documentation>Details a maximum and minimum per person cost for a holiday. This is based on the "lead in price" of the holiday.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="MaxPerPersonCost" type="xs:positiveInteger" use="required"/>
		<xs:attribute name="MinPerPersonCost" type="xs:positiveInteger" use="required"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="CostConstraints">
		<xs:annotation>
			<xs:documentation>Details a maximum and minimum per person cost for a holiday. This is based on the "lead in price" of the holiday.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="MaxCost" type="xs:positiveInteger" use="required"/>
		<xs:attribute name="MinCost" type="xs:positiveInteger" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="HolidayDuration">
		<xs:annotation>
			<xs:documentation>Details a maximum and minimum number of nights for a holiday duration</xs:documentation>
		</xs:annotation>
		<xs:attribute name="MinNumberOfNights" type="xs:nonNegativeInteger" use="required"/>
		<xs:attribute name="MaxNumberOfNights" type="xs:nonNegativeInteger" use="required"/>
	</xs:complexType>
	<xs:complexType name="DateRange">
		<xs:annotation>
			<xs:documentation>Details a range of dates that can optionally be restricted to a certain day of the week</xs:documentation>
		</xs:annotation>
		<xs:attribute name="StartDate" type="FABDate" use="required"/>
		<xs:attribute name="EndDate" type="FABDate" use="required"/>
		<xs:attribute name="DayOfWeek" type="DayOfWeekType" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SpecificAccommodation">
		<xs:annotation>
			<xs:documentation>Indicates a Supplier Specific Accommodation</xs:documentation>
		</xs:annotation>
		<xs:attribute name="AccomCode" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="optional"/>
		<xs:attribute name="ArrivalAirport" type="TravelPointCode" use="optional"/>
		<xs:attribute name="AccommodationId" type="xs:string" use="optional" />
	</xs:complexType>
	<xs:complexType name="SpecificAccommodationList">
		<xs:annotation>
			<xs:documentation>A List of supplier specific accommodations (max 9)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Accommodation" type="SpecificAccommodation" minOccurs="0" maxOccurs="1000"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FABFilterBase"/>
	<xs:complexType name="FABSearchDetails">
		<xs:complexContent>
			<xs:extension base="FABFilterBase"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FABFilterDetails">
		<xs:complexContent>
			<xs:extension base="FABFilterBase"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="HolidaySearchDetails">
		<xs:complexContent>
			<xs:extension base="FABSearchDetails">
				<xs:annotation>
					<xs:documentation>Defines a set of search criteria for finding holidays within the FAB system.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="SpecificRouteFlightSearchList" type="SpecificRouteFlightSearchList" minOccurs="0"/>
					<xs:element name="DepartureDateRange" type="DateRange" minOccurs="0"/>
					<xs:element name="DepartureAirports" type="AirportList" minOccurs="0"/>
					<xs:element name="CruiseEmbarkPorts" type="CruisePortList" minOccurs="0"/>
					<xs:element name="CruiseDisembarkPorts" type="CruisePortList" minOccurs="0"/>
					<xs:element name="DestinationChoice" type="DestinationChoice" minOccurs="0"/>
					<xs:element name="Suppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="ExcludeSuppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="Accommodations" type="SpecificAccommodationList" minOccurs="0"/>
					<xs:element name="AccommodationPreferences" type="AccommodationPreferences" minOccurs="0"/>
					<xs:element name="CostConstraints" type="PerPersonCostConstraints" minOccurs="0"/>
					<xs:element name="HolidayDuration" type="HolidayDuration" minOccurs="0"/>
					<xs:element name="FlightPreferences" type="FlightPreferences" minOccurs="0"/>
					<xs:element name="TimePreferences" type="TimePreferences" minOccurs="0"/>
					<xs:element name="DesiredOccupancy" type="OccupancyDetails" minOccurs="0" maxOccurs="9"/>
					<xs:element name="AdultAge" type="xs:integer" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ChildAge" type="xs:integer" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="RoomOptionsDesired" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="AttributesDesired" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="AccomInfoDesired" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="FlightOnly" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="OneWayOnly" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="NumberOfAdults" type="RequiredPaxCount" use="optional" default="1"/>
				<xs:attribute name="NumberOfChildren" type="OptionalPaxCount" use="optional" default="0"/>
				<xs:attribute name="NumberOfInfants" type="OptionalPaxCount" use="optional" default="0"/>
				<xs:attribute name="NumberOfRoomsRequired" type="Numeric1to9" use="optional"/>
				<xs:attribute name="ResortName" type="xs:string" use="optional"/>
				<xs:attribute name="IncludeITFares" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="SpanishPaxOnly" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SpecificRouteFlightSearchList">
		<xs:annotation>
			<xs:documentation>To search disconnected flight legs on a return flight. for example outbound: LHR -> JFK
		homebound: EWR -> LGW</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SpecificRouteFlightSearch" type="SpecificRouteFlightSearch" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SpecificRouteFlightSearch">
		<xs:sequence>
			<xs:element name="TravelPointPair" type="TravelPointPair" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelPointPair">
		<xs:attribute name="DeparturePoint" type="TravelPointCode" use="required"/>
		<xs:attribute name="ArrivalPoint" type="TravelPointCode" use="required"/>
	</xs:complexType>
	<xs:complexType name="TimePreferences">
		<xs:annotation>
			<xs:documentation>Departure Time Preferences</xs:documentation>
		</xs:annotation>
		<xs:attribute name="OutboundDepartureTime" type="FABTime" use="optional"/>
		<xs:attribute name="OutboundArrivalTime" type="FABTime" use="optional"/>
		<xs:attribute name="HomeboundDepartureTime" type="FABTime" use="optional"/>
		<xs:attribute name="HomeboundArrivalTime" type="FABTime" use="optional"/>
	</xs:complexType>
	<xs:complexType name="FlightPreferences">
		<xs:annotation>
			<xs:documentation>Defines a set of search criteria for finding holidays within the FAB system</xs:documentation>
		</xs:annotation>
		<xs:attribute name="CabinClass" type="FlightClass" use="optional"/>
		<xs:attribute name="Carrier" type="SupplierCode" use="optional"/>
		<xs:attribute name="DirectFlightsOnly" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="RequestTemplate">
		<xs:annotation>
			<xs:documentation>A request template can either reference a persistent RequestTemplate within the FAB system or it can detail a RequestModifierGroup that is used to alter the request before the search is performed.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="TemplateReference" type="xs:string"/>
			<xs:element name="InitialModifierCode" type="xs:string"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="SearchStrategy">
		<xs:annotation>
			<xs:documentation>A SearchStrategy can either reference a persistent strategy defined within the FAB system or it can detail a sequence of request modify codes to  be employed during the search process. Each modifier will be applied to the request after an intial failure to find any results,  to automatically alter the constraints before re-applying the search.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="StrategyReference" type="xs:string"/>
			<xs:element name="FailureModificationSequence" type="RequestModificationSequence"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ResultFilter">
		<xs:annotation>
			<xs:documentation>A SearchStrategy can either reference a persistent strategy defined within the FAB system or it can detail a sequence of request modify codes to  be employed during the search process. Each modifier will be applied to the request after an intial failure to find any results,  to automatically alter the constraints before re-applying the search.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="CustomFilter" type="xs:string"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="RequestModificationSequence">
		<xs:annotation>
			<xs:documentation>A sequence of modifications  that can be applied to a request one after another. i.e. after failing to find results the first time we would apply the first Modifier in the sequence and then repeat the search. If we still fail to find results we would again apply the next Modifier in the sequence before again repeating the search and so on. Each ModifierCode corresponds to a pre-defined request modification that can include changing multiple properties of the request based on the context of the search and can contain conditions that have to be met for the modification to be carried out. A list of codes and a description of the corresponding modification is available seperately, and it is easy for us to add new modifications on demand.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ModifierCode" type="xs:string" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ResultSetInfo">
		<xs:annotation>
			<xs:documentation>This is used both to indicate the desired properties of a result set (inside a request) and also to detail the actual properties of a result set (inside a response). It indicates how the result set is sorted, the maximum permissible size of the result set and (optionally) the actual size of the result set.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FilterDetails" type="FABFilterDetails" minOccurs="0"/>
			<xs:element name="Calendar" type="CalendarSearchDetails" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="SortCode" type="FABSortCode" use="optional" default="cost"/>
		<xs:attribute name="SortAscending" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="MaxItems" type="xs:positiveInteger" use="optional" default="300"/>
		<xs:attribute name="NumItems" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="SummaryOnly" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="IncludeSummary" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="FlightOnly" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="CalendarSearchDetails">
		<xs:annotation>
			<xs:documentation>Define calendar search restrictions</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Per" type="CalendarFilter" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Type" type="CalendarType" use="optional" default="cheapest"/>
	</xs:complexType>
	<xs:complexType name="ResultSetViewInfo">
		<xs:annotation>
			<xs:documentation>Describes a "view" into a result set, detailing both the offset and the length of the view.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Offset" type="xs:nonNegativeInteger" use="optional" default="0"/>
		<xs:attribute name="Length" type="xs:nonNegativeInteger" use="optional" default="50"/>
	</xs:complexType>
	<xs:complexType name="FABSearchRequest">
		<xs:annotation>
			<xs:documentation>Base object for all search requests</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ResultSetPreferences" type="ResultSetInfo">
				<xs:annotation>
					<xs:documentation>Details how the result set should be sorted and how many results it should contain</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="InitialViewInfo" type="ResultSetViewInfo">
				<xs:annotation>
					<xs:documentation>Details how many items should appear in the initial view of the result set contained within the response</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SearchStrategy" type="SearchStrategy" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Can be included to specifiy how the search criteria will be altered in the event of no results being returned from the original search</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="FilterCode" type="xs:string" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>A number of filters can be applied to the result set, the filter codes will be used by the default filter unless a CustomFilter is specified.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SearchPricingGroup" type="SearchPricingGroup" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Gives details of how to group items for the pricing service</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>If the search is using multiple handlers, then once this time has elapsed, the current results will be returned, and any results that arrive after that time will get thrown away.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="CustomFilter" type="xs:string" use="optional"/>
		<xs:attribute name="CustomFormatter" type="xs:string" use="optional"/>
		<xs:attribute name="ExcludeNonBookableSuppliers" type="xs:boolean" use="optional"/>
		<xs:attribute name="AllowCaching" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="CachedResultsOnly" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="FABSearchResponse">
		<xs:annotation>
			<xs:documentation>Base type for all search responses</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ViewInfo" type="ResultSetViewInfo">
				<xs:annotation>
					<xs:documentation>Information about the current ResultSetView. This indicates the current viewing window (PackageHolidaysList), i.e. the offset into the ResultSet and the number of items in the view.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ResultSetInfo" type="ResultSetInfo">
				<xs:annotation>
					<xs:documentation>Information about the current ResultSet. This indicates how the result set is sorted and also the total number of items in the result set. Please note that the PackageHolidays list does NOT necessarily contain all of the items in the ResultSet. If the ResultSetView window length is smaller than the Result set length, then the PackageHolidays list will only contain as many holidays as is indicated by the ViewInfo object.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="FailureModificationsEmployed" type="RequestModificationSequence" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Lists the codes of any modifications employed during the search as defined in the SearchStrategy property of the request.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Success" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>True if the PackageHolidays list contains some results. False if the search returned no results.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ModifiedRequest" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>True if the the original request was modified due to failure. True indicates that there is a list of FailureModificationsEmployed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="CannedQuery">
		<xs:annotation>
			<xs:documentation>A CannedQuery contains a reference to a pre-defined HolidaySearchRequest that is persisted within the FAB system, but also must contain information about how to return the search results.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ResultSetPreferences" type="ResultSetInfo">
				<xs:annotation>
					<xs:documentation>Details how the result set should be sorted and how many results it should contain</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="InitialViewInfo" type="ResultSetViewInfo">
				<xs:annotation>
					<xs:documentation>Details how many items should appear in the initial view of the result set contained within the response</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Reference" type="Numeric1to1000" use="optional"/>
	</xs:complexType>
	<xs:complexType name="HolidaySearchRequest">
		<xs:annotation>
			<xs:documentation>A Holiday Search request details the criteria of the search, the search strategy and also how the results should be returned. Simply extends FABSearchRequest</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="RequestTemplate" type="RequestTemplate" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Can be included to dynamically alter the search criteria before carrying out the search</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchCriteria" type="HolidaySearchDetails">
						<xs:annotation>
							<xs:documentation>Details the initial criteria of the search</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="HolidaySearchResponse">
		<xs:annotation>
			<xs:documentation>A HolidaySearchResponse contains information about the result set of the corresponding request as well as a view into that result set which is a list of simple package holiday objects</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:element name="PackageHolidays" type="SimplePackageHolidayList">
						<xs:annotation>
							<xs:documentation>List of PackageHolidays that is a viewing window into the result set that satisfies the constraints of the original request request.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="AccommodationAttributes" type="AccommodationAttributeList" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Indicates which accommodation attributes ALL accommodations found within the list of package holidays share. This will only appear when a required accommodation attribute list has been asked for in the coresponding  HolidaySearchRequest.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Summaries" type="SummaryList" minOccurs="0">
						<xs:annotation>
							<xs:documentation>List of PackageHolidays that is a viewing window into the result set that satisfies the constraints of the original request request.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationSearchRequest">
		<xs:annotation>
			<xs:documentation>A Holiday Search request details the criteria of the search, the search strategy and also how the results should be returned. Simply extends FABSearchRequest</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="SearchCriteria" type="AccommodationSearchDetails">
						<xs:annotation>
							<xs:documentation>Details the initial criteria of the search</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="ShowDescriptions" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="ShowImages" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="FilterRestricted" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="FilterWebRestricted" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="AllowOnRequest" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationSearchResponse">
		<xs:annotation>
			<xs:documentation>A HolidaySearchResponse contains information about the result set of the corresponding request as well as a view into that result set which is a list of simple package holiday objects</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:choice>
						<xs:element name="Accommodations" type="AccommodationSegmentList">
							<xs:annotation>
								<xs:documentation>List of PackageHolidays that is a viewing window into the result set that satisfies the constraints of the original request request.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Summaries" type="SummaryList" minOccurs="0">
							<xs:annotation>
								<xs:documentation>List of PackageHolidays that is a viewing window into the result set that satisfies the constraints of the original request request.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationSearchFilter">
		<xs:complexContent>
			<xs:extension base="FABFilterDetails">
				<xs:sequence>
					<xs:element name="BoardBases" type="MealPlanCodeList" minOccurs="0"/>
					<xs:element name="StarRatings" type="StarRatingList" minOccurs="0"/>
					<xs:element name="PropertyNames" type="PropertyNameList" minOccurs="0"/>
					<xs:element name="DestinationResortIds" type="ResortIdList" minOccurs="0"/>
					<xs:element name="SpecificAccommodationList" type="AccommodationIdList" minOccurs="0"/>
					<xs:element name="StartDateRange" type="DateRange" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FlightSearchFilter">
		<xs:complexContent>
			<xs:extension base="FABFilterDetails">
				<xs:sequence>
					<xs:element name="DepartureDateRange" type="DateRange" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationSearchDetails">
		<xs:complexContent>
			<xs:extension base="FABSearchDetails">
				<xs:sequence>
					<xs:annotation>
						<xs:documentation>Defines a set of search criteria for finding holidays within the FAB system. DesiredOccupancy can list exactly the desired occupancies for multiple rooms and takes precendence over NumberOfAdults/NumberOfKids/NumberOfRooms.</xs:documentation>
					</xs:annotation>
					<xs:element name="StartDateRange" type="DateRange" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Note, AccommodationSearches must have have identical Start and End Dates in the StartDateRange (spanning ranges are only allowed for FAB_PkgAvailRQ's</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="DestinationChoice" type="DestinationChoice" minOccurs="0"/>
					<xs:element name="SpecificAccommodationList" type="AccommodationIdList" minOccurs="0"/>
					<xs:element name="Suppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="ExcludeSuppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="DesiredBoardBasis" type="MealPlanCode" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="DesiredOccupancy" type="OccupancyDetails" minOccurs="0" maxOccurs="9"/>
					<xs:element name="PropertyCriteria" type="PropertyCriteria" minOccurs="0"/>
					<xs:element name="Budget" type="CostConstraints" minOccurs="0"/>
					<xs:element name="ChildAge" type="xs:integer" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="NumberOfNights" type="xs:integer" use="optional" default="1"/>
				<xs:attribute name="ResortName" type="xs:string" use="optional"/>
				<xs:attribute name="NumberOfAdults" type="RequiredPaxCount" use="optional" default="1"/>
				<xs:attribute name="NumberOfKids" type="OptionalPaxCount" use="optional" default="0"/>
				<xs:attribute name="NumberOfInfants" type="OptionalPaxCount" use="optional" default="0"/>
				<xs:attribute name="NumberOfRoomsRequired" type="Numeric1to99" use="optional" default="1"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationIdList">
		<xs:annotation>
			<xs:documentation>A list of FAB Accommodation Ids</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationId" type="xs:string" minOccurs="0" maxOccurs="1000"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccomUnitRequirement">
		<xs:annotation>
			<xs:documentation>Accom Unit requirements</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OccupancyDetails" type="OccupancyDetails"/>
			<xs:element name="Amenity" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="RoomType" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">A code value that indicates the type of room for which this request is made, e.g.: double, king, etc. Values may use the Hotel Descriptive Content table or a codes specific to the property or hotel brand.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="RoomLocationCode" type="OTA_CodeType" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Indicates the location of the room within the hotel structure. Typical values would be "Near Exit","Close to elevator", "Low Floor" or "High Floor". Refer to OTA Code List Romm Location Type (RLT).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="RoomViewCode" type="OTA_CodeType" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Indicates the view of the room. Typical values would be "Ocean view", "Pool view" or "Garden View". Refer to OTA Code List Room View Type (RVT).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="BedTypeCode" type="OTA_CodeType" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Indicates the type of bed(s) found in the room. Typical values would be Double, Twin, Queen, or King. Refer to OTA Code List Bed Type Code (BED).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NonSmoking" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Non-smoking indicator.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Composite" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Indicates that the room (suite) is a composite of smaller units.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="PropertyCriteria">
		<xs:annotation>
			<xs:documentation>Search criteria for a property, usually a hotel.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Position" type="GeoPosition" minOccurs="0"/>
			<xs:element name="Address" type="Address" minOccurs="0"/>
			<xs:element name="Radius" type="Radius" minOccurs="0"/>
			<xs:element name="StarRating" type="AccommodationClassCode" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AccommodationType" type="FABAccommodationType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Amenity" type="OTA_CodeType" minOccurs="0" maxOccurs="5"/>
		</xs:sequence>
		<xs:attribute name="BrandName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">If you want to search by hotel brand use this.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PropertyName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">If you want to search by name, use this.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WildCardSearch" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation xml:lang="en">Set this to true if you want to add wild cards to a property name</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="TelephoneNumber" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">If you want to search by telephone number, use this.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ExactMatch" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation xml:lang="en">All data MUST match if this is set to true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="GeoPosition">
		<xs:annotation>
			<xs:documentation>Used to identify geospatial postion.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Latitude" type="xs:string" use="optional"/>
		<xs:attribute name="Longitude" type="xs:string" use="optional"/>
		<xs:attribute name="Altitude" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Radius">
		<xs:annotation>
			<xs:documentation>Used to limit a geo search from a point</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Distance" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation xml:lang="en">An attribute indicating the distance to/from a reference point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="DistanceMeasure" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation xml:lang="en">When the Distance attribute contains a value, (presumably a numerical value), the unit of measure is a string value that indicate what units are used for the value.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Direction" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">An optional string value used to indicate the compass point(s) direction, e.g.: S, SE (South, Southeast), FROM the Reference Point TO the hotel location if the search is not a full circumference from the reference point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="SimplePackageAccommodationDetails">
		<xs:annotation>
			<xs:documentation>Details the accommodation of a simple package holiday</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationInfo" type="AccommodationInfo" minOccurs="0"/>
			<xs:element name="ChosenRoomOptions" type="AccommodationUnitList" minOccurs="0"/>
			<xs:element name="RoomOptions" type="AccommodationUnitList" minOccurs="0"/>
			<xs:element name="ReviewComponent" type="AccommodationReviewComponentResponse" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="AccommodationName" type="xs:string" use="required"/>
		<xs:attribute name="ResortName" type="xs:string" use="optional"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="SupplierLocationId" type="xs:string" use="optional"/>
		<xs:attribute name="AccommodationCode" type="xs:string" use="required"/>
		<xs:attribute name="BoardCode" type="MealPlanCode" use="required"/>
		<xs:attribute name="ClassCode" type="AccommodationClassCode" use="required"/>
		<xs:attribute name="MaxChildAge" type="Numeric0to99" use="optional"/>
		<xs:attribute name="InfantAge" type="Numeric0to99" use="optional"/>
		<xs:attribute name="AccommodationId" type="xs:string" use="optional"/>
		<xs:attribute name="Brochure" type="xs:string" use="optional"/>
		<xs:attribute name="BrandName" type="xs:string" use="optional"/>
		<xs:attribute name="SyndicatorRanking" type="xs:integer" use="optional" default="100"/>
	</xs:complexType>
	<xs:complexType name="SimplePackageFlightDetails">
		<xs:annotation>
			<xs:documentation>Details both outbound and homebound flight information for a simple package holiday object</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FareRules" type="xs:string" minOccurs="0"/>
			<xs:element name="OutboundBaggageAllowance" type="BaggageAllowance" minOccurs="0"/>
			<xs:element name="OutboundSubSegments" type="TravelSubSegment" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="HomeboundBaggageAllowance" type="BaggageAllowance" minOccurs="0"/>
			<xs:element name="HomeboundSubSegments" type="TravelSubSegment" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="FlightJourneyDetails" type="FlightJourneyDetails" minOccurs="0" maxOccurs="2"/>
			<xs:element name="BookingCharges" type="ChargeList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="OriginAirport" type="TravelPointCode" use="required"/>
		<xs:attribute name="DestinationAirport" type="TravelPointCode" use="required"/>
		<xs:attribute name="HomeboundDeparturePoint" type="TravelPointCode" use="optional"/>
		<xs:attribute name="HomeboundArrivalPoint" type="TravelPointCode" use="optional"/>
		<xs:attribute name="DisconnectedFlights" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="DepartureDate" type="FABDate" use="required"/>
		<xs:attribute name="DepartureTime" type="FABTime" use="optional"/>
		<xs:attribute name="ReturnHomeDate" type="FABDate" use="optional"/>
		<xs:attribute name="ReturnHomeTime" type="FABTime" use="optional"/>
		<xs:attribute name="OutboundTravelCode" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnTravelCode" type="xs:string" use="optional"/>
		<xs:attribute name="OutboundFlightClass" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnFlightClass" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnHomeDepartDate" type="FABDate" use="optional"/>
		<xs:attribute name="ReturnHomeDepartTime" type="FABTime" use="optional"/>
		<xs:attribute name="ArrivalDate" type="FABDate" use="optional"/>
		<xs:attribute name="ArrivalTime" type="FABTime" use="optional"/>
		<xs:attribute name="OutboundFlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnFlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="OutboundFlightBasePrice" type="xs:float" use="optional"/>
		<xs:attribute name="ReturnFlightBasePrice" type="xs:float" use="optional"/>
		<xs:attribute name="MultiLegOutboundFlight" type="xs:boolean" use="optional"/>
		<xs:attribute name="MultiLegReturnFlight" type="xs:boolean" use="optional"/>
		<xs:attribute name="OutboundCarrier" type="SupplierCode" use="optional"/>
		<xs:attribute name="ReturnCarrier" type="SupplierCode" use="optional"/>
		<xs:attribute name="MarketingCarrier" type="FABCarrierCode" use="optional"/>
		<xs:attribute name="OuboundJourneyMins" type="xs:integer" use="optional"/>
		<xs:attribute name="ReturnJourneyMins" type="xs:integer" use="optional"/>
		<xs:attribute name="FareClass" type="xs:string" use="optional"/>
		<xs:attribute name="OutboundNumStops" type="xs:integer" use="optional"/>
		<xs:attribute name="ReturnNumStops" type="xs:integer" use="optional"/>
		<xs:attribute name="OutboundAirlineName" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnAirlineName" type="xs:string" use="optional"/>
		<xs:attribute name="MarketingCarrierName" type="xs:string" use="optional"/>
		<xs:attribute name="OriginAirportName" type="xs:string" use="optional"/>
		<xs:attribute name="DestinationAirportName" type="xs:string" use="optional"/>
		<xs:attribute name="FareType" type="FareType" use="optional"/>
		<xs:attribute name="ITFare" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="CAT35Fare" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="OutboundCabinClass" type="xs:string" use="optional" default="economy"/>
		<xs:attribute name="ReturnCabinClass" type="xs:string" use="optional" default="economy"/>
		<xs:attribute name="OutboundStopPoints" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnStopPoints" type="xs:string" use="optional"/>
		<xs:attribute name="NumberOfSeats" type="xs:nonNegativeInteger" use="optional"/>
	</xs:complexType>
	<xs:complexType name="FlightJourneyDetails">
		<xs:annotation>
			<xs:documentation>Used in mixed carrier flights to hold real supplier, carrier and fare details</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
			<xs:element name="CostDetails" type="ChargeList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Direction" type="FlightDirection" use="required"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="MarketingCarrier" type="SupplierCode" use="optional"/>
		<xs:attribute name="FareType" type="FareType" use="optional"/>
		<xs:attribute name="FareClass" type="xs:string" use="optional"/>
		<xs:attribute name="ITFare" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="CAT35Fare" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="ChargeList">
		<xs:annotation>
			<xs:documentation>Contains a list of different monetary charges</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Charge" type="Charge" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Charge">
		<xs:complexContent>
			<xs:extension base="MonetaryAmount">
				<xs:attribute name="PaxType" type="PaxType" use="optional"/>
				<xs:attribute name="Type" type="ChargeType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MonetaryAmount">
		<xs:attribute name="Amount" type="xs:float" use="required"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="required"/>
	</xs:complexType>
	<xs:complexType name="SimplePackageTransferDetails">
		<xs:annotation>
			<xs:documentation>Information about a transfer for a simple package</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Description" type="xs:string" minOccurs="0"/>
			<xs:element name="Type" type="TransferType" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Included" type="xs:boolean" use="required"/>
	</xs:complexType>
	<xs:complexType name="SimplePackageHoliday">
		<xs:annotation>
			<xs:documentation>Defines a simple package holiday consisting of a flight segment and possibly an accommodation segment</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Flight" type="SimplePackageFlightDetails"/>
			<xs:element name="Accommodation" type="SimplePackageAccommodationDetails" minOccurs="0"/>
			<xs:element name="Transfer" type="SimplePackageTransferDetails" minOccurs="0"/>
			<xs:element name="FOIDAllowed" type="FOIDList" minOccurs="0"/>
			<xs:element name="Attribute" type="FABAttribute" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="HolidayCostComponent" type="HolidayCostComponent" minOccurs="0"/>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ItineraryId" type="xs:string" use="required"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
		<xs:attribute name="Country" type="ISO3166" use="optional"/>
		<xs:attribute name="NumberOfNights" type="xs:integer" use="optional"/>
		<xs:attribute name="LeadInPricePerPassenger" type="xs:float" use="required"/>
		<xs:attribute name="ChildPrice" type="xs:float" use="optional"/>
		<xs:attribute name="InfantPrice" type="xs:float" use="optional"/>
		<xs:attribute name="PartyPrice" type="xs:float" use="optional"/>
		<xs:attribute name="WasPartyPrice" type="xs:float" use="optional"/>
		<xs:attribute name="FlightOnly" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="OneWayOnly" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="BookableByFAB" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="BookingChannel" type="FABBookingChannel" use="optional"/>
		<xs:attribute name="DynamicPackage" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="PassengerIdRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for PassengerId in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PassengerIdMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket you must provide a value for PassengerId in each Customer attached to the basket. If this is set to false, but PassengerIdRequired is set to true, then FAB is able to book the Itinerary with or without FOID information at the booking stage. However, if no FOID info is provided to FAB, FOID information will normally be required by the supplier PRIOR to departure</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NationalityRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for Nationality in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="VatRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for Nationality in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NationalityMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket must provide a value for Nationality in each Customer attached to the basket. If this is set to false, but NationalityRequired is set to true, then FAB is able to book the Itinerary with or without FOID information at the booking stage. However, if no Nationality is provided to FAB,  will normally be required by the supplier PRIOR to departure</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PassengerFullMiddleNameMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket must provide the middle name in the MiddleInitial field for each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="SimplePackageHolidayList">
		<xs:annotation>
			<xs:documentation>A list of SimplePackageHoliday objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PackageHoliday" type="SimplePackageHoliday" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FOIDList">
		<xs:annotation>
			<xs:documentation>A list of FormOdIDTypes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FOID" type="FormOfIDType" minOccurs="0" maxOccurs="9"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ClassCodeGrid">
		<xs:annotation>
			<xs:documentation>A Grid of grouped holiday information each containing a list of LowestPriceClassCode objects. Represents a "Lates Grid" style result set.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RowConstraints" type="RowConstraintList"/>
			<xs:element name="Row" type="ClassCodeGridRow" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ClassCodeGridRow">
		<xs:annotation>
			<xs:documentation>Represents a row inside a ClassCodeGrid</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Cell" type="ClassCodeGridCell" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="OriginAirport" type="TravelPointCode" use="optional"/>
		<xs:attribute name="DestinationAirport" type="TravelPointCode" use="optional"/>
		<xs:attribute name="DepartureDate" type="FABDate" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="optional"/>
		<xs:attribute name="Country" type="ISO3166" use="optional"/>
		<xs:attribute name="NumberOfNights" type="Numeric1to99" use="optional"/>
		<xs:attribute name="ResortName" type="xs:string" use="optional"/>
		<xs:attribute name="BoardCode" type="MealPlanCode" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ClassCodeGridCell">
		<xs:annotation>
			<xs:documentation>Each Cell in a ClassCodeGrid contains a ClassCode and a MinLeadInPricePerPassenger</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ClassCode" type="AccommodationClassCode" use="required"/>
		<xs:attribute name="MinLeadInPricePerPassenger" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="RowConstraintList">
		<xs:annotation>
			<xs:documentation>List of column codes tells us how to build a grid</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RowConstraint" type="FABSortCode" minOccurs="0" maxOccurs="8"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ClassCodeGridRequest">
		<xs:annotation>
			<xs:documentation>A request that will create a ClassCode grid result set</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="HolidaySearchRequest">
				<xs:sequence>
					<xs:element name="RowConstraints" type="RowConstraintList" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ClassCodeGridResponse">
		<xs:annotation>
			<xs:documentation>A class code grid response will contain a class code grid</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:element name="ClassCodeGrid" type="ClassCodeGrid"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SyndicatorInfo">
		<xs:annotation>
			<xs:documentation>This is a mandatory object for every request, indicating which syndicator is accessing the FAB Service</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SyndicatorId" type="NonEmptyString" use="required"/>
		<xs:attribute name="SyndicatorPassword" type="NonEmptyString" use="optional"/>
	</xs:complexType>
	<xs:complexType name="UserInfo">
		<xs:annotation>
			<xs:documentation>Indicates which user is accessing the FAB Service.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Username" type="xs:string" use="required"/>
		<xs:attribute name="Password" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ConsumersContextInfo">
		<xs:annotation>
			<xs:documentation>This is included in all Requests to FAB and is reflected back in each Response. This allows consumers of the service to attach context to a request/response pair. Please note that this facility should not be abused in order to avoid unnecessary bandwidth overhead.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Parameter" type="NameValuePair" minOccurs="0" maxOccurs="10"/>
		</xs:sequence>
		<xs:attribute name="Reference" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="NameValuePair">
		<xs:annotation>
			<xs:documentation>Generic name/value pair</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Value" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABSessionInfo">
		<xs:annotation>
			<xs:documentation>Either contains a reference to a session already in progress, or instructs FAB to either create a new session, or to not bother creating a new session.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="FABSessionId" type="FABSessionIdType" use="optional"/>
		<xs:attribute name="CreateNewSession" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="FABError">
		<xs:annotation>
			<xs:documentation>Desribes a FAB error</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ErrorText" type="xs:string" use="required"/>
		<xs:attribute name="ErrorCode" type="xs:string" use="required"/>
		<xs:attribute name="SupplierErrorText" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="FABErrorList">
		<xs:annotation>
			<xs:documentation>A List of FABError objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Error" type="FABError" minOccurs="0" maxOccurs="5"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FABWarningList">
		<xs:annotation>
			<xs:documentation>A List of FAB Warning texts</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Warning" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TicketInfo">
		<xs:annotation>
			<xs:documentation>If the reservation system does not issue a paper ticket, extra ticket information can be issued at the time of booking. This information will be attached to a TravelSegment and will appear in a TicketInfo element. This quite often happens if the holiday departure date is within 14 days of the booking date, known as 'ticket on departure'.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="CheckInDate" type="FABDate" use="optional"/>
		<xs:attribute name="CheckInTime" type="FABTime" use="optional"/>
		<xs:attribute name="CheckInDetails" type="xs:string" use="optional"/>
		<xs:attribute name="CollectionDetails" type="xs:string" use="optional"/>
		<xs:attribute name="FlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="BaggageAllowance" type="xs:string" use="optional"/>
		<xs:attribute name="TicketOnDeparture" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="DepartureTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="ArrivalTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="LastTicketDate" type="FABDate" use="optional"/>
		<xs:attribute name="CarrierReservationCode" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelSubSegment">
		<xs:annotation>
			<xs:documentation>A sub segment of a travel within an TravelSegment</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BaggageAllowance" type="BaggageAllowance" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="DeparturePoint" type="TravelPointCode" use="required"/>
		<xs:attribute name="DepartureDate" type="FABDate" use="required"/>
		<xs:attribute name="DepartureTime" type="FABTime" use="optional"/>
		<xs:attribute name="ArrivalPoint" type="TravelPointCode" use="required"/>
		<xs:attribute name="ArrivalDate" type="FABDate" use="optional"/>
		<xs:attribute name="ArrivalTime" type="FABTime" use="optional"/>
		<xs:attribute name="OperatingCarrier" type="SupplierCode" use="optional"/>
		<xs:attribute name="OperatedBy" type="xs:string" use="optional"/>
		<xs:attribute name="FlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="OriginAirportName" type="xs:string" use="optional"/>
		<xs:attribute name="DestinationAirportName" type="xs:string" use="optional"/>
		<xs:attribute name="FlightClass" type="xs:string" use="optional"/>
		<xs:attribute name="NumStops" type="xs:integer" use="optional"/>
		<xs:attribute name="StopPoints" type="xs:string" use="optional"/>
		<xs:attribute name="DepartureTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="ArrivalTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="CarrierReservationCode" type="xs:string" use="optional"/>
		<xs:attribute name="JourneyMins" type="xs:integer" use="optional"/>
		<xs:attribute name="EquipmentIdentifier" type="xs:string" use="optional"/>
		<xs:attribute name="HandBaggageOnly" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelSegment">
		<xs:annotation>
			<xs:documentation>A segment of a travel within an itinerary from point A to point B</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TicketInfo" type="TicketInfo" minOccurs="0"/>
			<xs:element name="BaggageAllowance" type="BaggageAllowance" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SubSegment" type="TravelSubSegment" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Id" type="xs:string" use="optional"/>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Status" type="FABStatus" use="optional"/>
		<xs:attribute name="DeparturePoint" type="TravelPointCode" use="optional"/>
		<xs:attribute name="ArrivalPoint" type="TravelPointCode" use="optional"/>
		<xs:attribute name="Transport" type="TransportType" use="optional"/>
		<xs:attribute name="Type" type="TravelSegmentType" use="optional"/>
		<xs:attribute name="DepartureDate" type="FABDate" use="optional"/>
		<xs:attribute name="DepartureTime" type="FABTime" use="optional"/>
		<xs:attribute name="ArrivalDate" type="FABDate" use="optional"/>
		<xs:attribute name="ArrivalTime" type="FABTime" use="optional"/>
		<xs:attribute name="TravelCode" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="optional"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
		<xs:attribute name="ItineraryId" type="xs:string" use="optional"/>
		<xs:attribute name="BasicAdultCost" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="FlightClass" type="xs:string" use="optional"/>
		<xs:attribute name="OperatedBy" type="xs:string" use="optional"/>
		<xs:attribute name="OperatingCarrier" type="xs:string" use="optional"/>
		<xs:attribute name="MarketingCarrier" type="xs:string" use="optional"/>
		<xs:attribute name="MarketedBy" type="xs:string" use="optional"/>
		<xs:attribute name="JourneyMins" type="xs:integer" use="optional"/>
		<xs:attribute name="Ref" type="xs:string" use="optional"/>
		<xs:attribute name="AppliesToRate" type="xs:string" use="optional"/>
		<xs:attribute name="FareClass" type="xs:string" use="optional"/>
		<xs:attribute name="NumStops" type="xs:integer" use="optional"/>
		<xs:attribute name="DeparturePointName" type="xs:string" use="optional"/>
		<xs:attribute name="ArrivalPointName" type="xs:string" use="optional"/>
		<xs:attribute name="FareType" type="FareType" use="optional"/>
		<xs:attribute name="ITFare" type="xs:boolean" use="optional"/>
		<xs:attribute name="CAT35Fare" type="xs:boolean" use="optional"/>
		<xs:attribute name="CabinClass" type="xs:string" use="optional"/>
		<xs:attribute name="StopPoints" type="xs:string" use="optional"/>
		<xs:attribute name="EquipmentIdentifier" type="xs:string" use="optional"/>
		<xs:attribute name="HandBaggageOnly" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AccommodationSegment">
		<xs:annotation>
			<xs:documentation>A segment of an itinerary spent at a particualar accommodation</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AvailableBoardBasis" type="MealPlanCode" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Address" type="Address" minOccurs="0"/>
			<xs:element name="TelephoneNumber" type="xs:string" minOccurs="0"/>
			<xs:element name="Description" type="xs:string" minOccurs="0"/>
			<xs:element name="GeoPosition" type="GeoPosition" minOccurs="0"/>
			<xs:element name="DirectLink" type="DirectLinkItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AccommodationUnits" type="AccommodationUnitList" minOccurs="0"/>
			<xs:element name="ChosenAccommodationUnits" type="AccommodationUnitList" minOccurs="0"/>
			<xs:element name="Image" type="ImageItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ThirdPartyReference" type="ThirdPartyReference" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
			<xs:element name="ReviewComponent" type="AccommodationReviewComponentResponse" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Status" type="FABStatus" use="optional"/>
		<xs:attribute name="ItineraryId" type="xs:string" use="optional"/>
		<xs:attribute name="AccommodationCode" type="xs:string" use="required"/>
		<xs:attribute name="AccommodationId" type="xs:string" use="optional"/>
		<xs:attribute name="AccommodationName" type="xs:string" use="required"/>
		<xs:attribute name="NormalisedName" type="xs:string" use="optional"/>
		<xs:attribute name="BrandName" type="xs:string" use="optional"/>
		<xs:attribute name="ResortName" type="xs:string" use="optional"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="MaxChildAge" type="Numeric0to99" use="optional" default="12"/>
		<xs:attribute name="InfantAge" type="Numeric0to99" use="optional"/>
		<xs:attribute name="StartDate" type="FABDate" use="optional"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="SuppliersBoardCode" type="xs:string" use="optional"/>
		<xs:attribute name="BoardCode" type="MealPlanCode" use="optional"/>
		<xs:attribute name="ClassCode" type="AccommodationClassCode" use="optional"/>
		<xs:attribute name="OfficialRating" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierPrincipalAssured" type="xs:boolean" use="optional"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
		<xs:attribute name="NumNights" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="BasicAdultCost" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="Availability" type="FABAvailabilityStatus" use="optional"/>
		<xs:attribute name="SupplierLocationId" type="xs:string" use="optional"/>
		<xs:attribute name="Type" type="FABAccommodationType" use="optional" default="Unknown"/>
		<xs:attribute name="ContractCode" type="xs:string" use="optional"/>
		<xs:attribute name="MiscCode" type="xs:string" use="optional"/>
		<xs:attribute name="BookableByFAB" type="xs:boolean" use="optional"/>
		<xs:attribute name="SpecialOffer" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="SpecialOfferText" type="xs:string" use="optional"/>
		<xs:attribute name="SyndicatorRanking" type="xs:integer" use="optional" default="100"/>
		<xs:attribute name="SyndicatorRef" type="xs:string" use="optional"/>
		<xs:attribute name="Brochure" type="xs:string" use="optional"/>
		<xs:attribute name="CheckInTime" type="FABTime" use="optional"/>
		<xs:attribute name="CheckOutTime" type="FABTime" use="optional"/>
		<xs:attribute name="BookingsMade" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Attraction">
		<xs:annotation>
			<xs:documentation>Details of an attraction</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TicketName" type="xs:string" minOccurs="0"/>
			<xs:element name="BrandName" type="xs:string" minOccurs="0"/>
			<xs:element name="ResortID" type="xs:string" minOccurs="0"/>
			<xs:element name="Latitude" type="xs:string" minOccurs="0"/>
			<xs:element name="Longitude" type="xs:string" minOccurs="0"/>
			<xs:element name="FullDescription" type="xs:string" minOccurs="0"/>
			<xs:element name="TopAttractions" type="xs:string" minOccurs="0"/>
			<xs:element name="AdditionalInformation" type="xs:string" minOccurs="0"/>
			<xs:element name="WhatsIncluded" type="xs:string" minOccurs="0"/>
			<xs:element name="ImageUrl" type="xs:string" minOccurs="0"/>
			<xs:element name="ImageThumbnailUrl" type="xs:string" minOccurs="0"/>
			<xs:element name="Type" type="FABOptionalExtraType" minOccurs="0"/>
			<xs:element name="Code" type="xs:string" minOccurs="0"/>
			<xs:element name="ResortName" type="xs:string" minOccurs="0"/>
			<xs:element name="Country" type="xs:string" minOccurs="0"/>
			<xs:element name="ChildAgeFrom" type="xs:integer" minOccurs="0"/>
			<xs:element name="ChildAgeTo" type="xs:integer" minOccurs="0"/>
			<xs:element name="ChildPrice" type="xs:decimal" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSegmentList">
		<xs:annotation>
			<xs:documentation>A List of travel segments</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelSegment" type="TravelSegment" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="DisconnectedFlights" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="AccommodationSegmentList">
		<xs:annotation>
			<xs:documentation>A List of accommodation segments</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationSegment" type="AccommodationSegment" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AttractionList">
		<xs:annotation>
			<xs:documentation>A List of attraction objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Attraction" type="Attraction" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Rate">
		<xs:annotation>
			<xs:documentation>A rate object describes the cost of something</xs:documentation>
		</xs:annotation>
		<xs:attribute name="StartDate" type="FABDate" use="required"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="RateId" type="xs:string" use="optional"/>
		<xs:attribute name="RateCode" type="xs:string" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="Amount" type="xs:float" use="required"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="CabinRate">
		<xs:annotation>
			<xs:documentation>A rate object describes the cost of something</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Rate">
				<xs:attribute name="AdultCost" type="xs:float" use="optional"/>
				<xs:attribute name="ChildCost" type="xs:float" use="optional"/>
				<xs:attribute name="InfantCost" type="xs:float" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RoomRate">
		<xs:annotation>
			<xs:documentation>A rate object describes the cost of something</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Rate">
				<xs:attribute name="BoardBasis" type="MealPlanCode" use="optional"/>
				<xs:attribute name="SuppliersBoardCode" type="xs:string" use="optional"/>
				<xs:attribute name="AmountPerDay" type="xs:float" use="optional"/>
				<xs:attribute name="AmountPerPax" type="xs:float" use="optional"/>
				<xs:attribute name="WasPrice" type="xs:float" use="optional"/>
				<xs:attribute name="RefundType" type="RefundType" use="optional"/>
				<xs:attribute name="SupplierRateCode" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitBase">
		<xs:sequence>
			<xs:element name="OccupancyDetails" type="OccupancyDetails" minOccurs="0"/>
			<xs:element name="ShortDescription" type="xs:string" minOccurs="0"/>
			<xs:element name="LongDescription" type="xs:string" minOccurs="0"/>
			<xs:element name="AdditionalInfo" type="MoreInfoTexts" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="MaxOccupancy" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="MinOccupancy" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="MaxExtraChildren" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="MaxExtraInfants" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="QuantityAvailable" type="xs:integer" use="optional"/>
		<xs:attribute name="Availability" type="FABAvailabilityStatus" use="optional"/>
		<xs:attribute name="Name" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AccommodationUnit">
		<xs:complexContent>
			<xs:extension base="AccommodationUnitBase">
				<xs:annotation>
					<xs:documentation>An AccommodationUnit object represents a Room or suite of rooms, e.g. 3 Bed Apartment. It can optionally contain information detailing how this room will be occupied by the customers party.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Facility" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="RoomRate" type="RoomRate" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="Status" type="FABStatus" use="optional"/>
				<xs:attribute name="Code" type="xs:string" use="required"/>
				<xs:attribute name="Facilities" type="xs:string" use="optional"/>
				<xs:attribute name="FacilitiesBitmap" type="xs:integer" use="optional"/>
				<xs:attribute name="NumRooms" type="xs:nonNegativeInteger" use="optional" default="1"/>
				<xs:attribute name="Supplement" type="xs:float" use="optional"/>
				<xs:attribute name="RoomType" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">A code value that indicates the type of room for which this request is made, e.g.: double, king, etc. Values may use the Hotel Descriptive Content table or a codes specific to the property or hotel brand.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RoomLocationCode" type="OTA_CodeType" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Indicates the location of the room within the hotel structure. Typical values would be "Near Exit","Close to elevator", "Low Floor" or "High Floor". Refer to OTA Code List Romm Location Type (RLT).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RoomViewCode" type="OTA_CodeType" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Indicates the view of the room. Typical values would be "Ocean view", "Pool view" or "Garden View". Refer to OTA Code List Room View Type (RVT).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="BedTypeCode" type="OTA_CodeType" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Indicates the type of bed(s) found in the room. Typical values would be Double, Twin, Queen, or King. Refer to OTA Code List Bed Type Code (BED).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="NonSmoking" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Non-smoking indicator.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="Composite" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Indicates that the room (suite) is a composite of smaller units.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="AUID" type="xs:string" use="optional"/>
				<xs:attribute name="ContractCode" type="xs:string" use="optional"/>
				<xs:attribute name="RoomsLeft" type="xs:nonNegativeInteger" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OccupancyDetails">
		<xs:annotation>
			<xs:documentation>Describes the occupancy of a given accommodation unit.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="NumAdults" type="OptionalPaxCount" use="required"/>
		<xs:attribute name="NumChildren" type="OptionalPaxCount" use="optional" default="0"/>
		<xs:attribute name="NumInfants" type="OptionalPaxCount" use="optional" default="0"/>
	</xs:complexType>
	<xs:complexType name="CarDetails">
		<xs:annotation>
			<xs:documentation>Describes car details, for car parking purposes</xs:documentation>
		</xs:annotation>
		<xs:attribute name="CarRegistration" type="xs:string" use="optional"/>
		<xs:attribute name="CarMake" type="xs:string" use="optional"/>
		<xs:attribute name="CarModel" type="xs:string" use="optional"/>
		<xs:attribute name="CarColour" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Customer">
		<xs:annotation>
			<xs:documentation>Describes a custormer that will be going on the holiday.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SelectedOptionID" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="AppliesToDate" type="FABDate" use="optional"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="ContactDetails" type="CustomerContactDetails" minOccurs="0"/>
			<xs:element name="SeatOption" type="SeatOptions" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Status" type="FABStatus" use="optional"/>
		<xs:attribute name="Surname" type="NonEmptyString" use="required"/>
		<xs:attribute name="Firstname" type="NonEmptyString" use="required"/>
		<xs:attribute name="DOB" type="FABDate" use="required"/>
		<xs:attribute name="Title" type="FABTitle" use="required"/>
		<xs:attribute name="MiddleInitials" type="xs:string" use="optional"/>
		<xs:attribute name="CountsAs" type="FABCustomerType" use="optional"/>
		<xs:attribute name="PassengerID" type="xs:string" use="optional"/>
		<xs:attribute name="IDSubType" type="xs:string" use="optional"/>
		<xs:attribute name="IDExpireDate" type="xs:string" use="optional"/>
		<xs:attribute name="IDIssueDate" type="xs:string" use="optional"/>
		<xs:attribute name="IDIssueCountry" type="ISO3166" use="optional"/>
		<xs:attribute name="FOID" type="FormOfIDType" use="optional"/>
		<xs:attribute name="MealPrefCode" type="xs:string" use="optional"/>
		<xs:attribute name="SeatPrefCode" type="xs:string" use="optional"/>
		<xs:attribute name="Nationality" type="ISO3166" use="optional"/>
		<xs:attribute name="Gender" type="FABGender" use="optional"/>
		<xs:attribute name="NationalId" type="xs:string" use="optional"/>
		<xs:attribute name="CertificateId" type="xs:string" use="optional"/>
		<xs:attribute name="Municipality" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SeatBand">
		<xs:attribute name="Id" type="xs:string" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="Price" type="xs:decimal" use="required"/>
		<xs:attribute name="Class" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Seat">
		<xs:attribute name="Num" type="xs:string" use="required"/>
		<xs:attribute name="Availabile" type="xs:boolean" use="optional"/>
		<xs:attribute name="BandId" type="xs:string" use="optional"/>
		<xs:attribute name="Block" type="xs:integer" use="optional"/>
		<xs:attribute name="Row" type="xs:string" use="optional"/>
		<xs:attribute name="AllowInfant" type="xs:boolean" use="optional"/>
		<xs:attribute name="AllowChild" type="xs:boolean" use="optional"/>
		<xs:attribute name="ExitRow" type="xs:boolean" use="optional"/>
		<xs:attribute name="Position" type="SeatPosition" use="optional"/>
		<xs:attribute name="Access" type="SeatAccess" use="optional"/>
		<xs:attribute name="MeetsRestriction" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:simpleType name="SeatPosition">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Aisle"/>
			<xs:enumeration value="Middle"/>
			<xs:enumeration value="Window"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SeatAccess">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Regular"/>
			<xs:enumeration value="Special"/>
			<xs:enumeration value="Restricted"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CustomerList">
		<xs:annotation>
			<xs:documentation>List of Customers objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="LeadCustomer" type="Customer"/>
			<xs:element name="Customer" type="Customer" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitList">
		<xs:annotation>
			<xs:documentation>List of AccommodationUnit objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationUnit" type="AccommodationUnit" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="HolidayCost">
		<xs:annotation>
			<xs:documentation>Describes the costs associated with a particular itinerary.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Component" type="HolidayCostComponent" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PaymentCardCharge" type="PaymentCardCharge" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PricingAudit" type="PricingAudit" minOccurs="0"/>
			<xs:element name="PricingRulesTotals" type="AppliedPricingRules" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TotalCost" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>The current total cost of this itinerary.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="AmendmentCostDifference" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>
				Post Booking Costing only. Only present in post booking amendment costing responses. The cost difference of the specified amendment
				from the original total cost to the projected total cost should it be performed.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="CostingStage" type="FABCostingStage" use="optional"/>
		<xs:attribute name="CostingAccuracy" type="Percentage" use="optional"/>
		<xs:attribute name="BasedOn" type="xs:string" use="optional"/>
		<xs:attribute name="PartyInfoCheck" type="xs:string" use="optional"/>
		<xs:attribute name="DepositRequiredAtBooking" type="xs:float" use="optional"/>
		<xs:attribute name="CostingValid" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="HolidayCostComponent">
		<xs:annotation>
			<xs:documentation>Groups the Cost detail by Supplier</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Detail" type="HolidayCostDetail" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PaymentCardCharge" type="PaymentCardCharge" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PricingAudit" type="PricingAudit" minOccurs="0"/>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="CostingStage" type="FABCostingStage" use="optional" default="estimate"/>
		<xs:attribute name="TotalCost" type="xs:float" use="required"/>
		<xs:attribute name="AmendmentCostDifference" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>
				Post Booking Costing only. Only present in post booking amendment costing responses. The cost difference of the specified amendment
				from the original total cost of the component to the projected total cost of the component should it be performed.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="DepositRequiredAtBooking" type="xs:float" use="optional"/>
		<xs:attribute name="SourceDepositRequiredAtBooking" type="xs:float" use="optional"/>
		<xs:attribute name="UpdatedTime" type="FABDateTime" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="HostSystemRequiresPaymentCard" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="Visible" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="ComponentType" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="HolidayCostDetail">
		<xs:annotation>
			<xs:documentation>Describes the detail of a cost</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SourceCostDetail" type="SourceCostDetail" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Description" type="xs:string" use="required"/>
		<xs:attribute name="UnitCost" type="xs:float" use="required"/>
		<xs:attribute name="Quantity" type="xs:integer" use="required"/>
		<xs:attribute name="ExtendedCost" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="PriceDescription" type="xs:string" use="optional"/>
		<xs:attribute name="PriceCode" type="xs:string" use="optional"/>
		<xs:attribute name="PriceType" type="FABPriceType" use="optional"/>
		<xs:attribute name="FPC" type="xs:string" use="optional"/>
		<xs:attribute name="ComponentType" type="xs:string" use="optional"/>
		<xs:attribute name="ExtraCode" type="xs:string" use="optional"/>
		<xs:attribute name="OriginalCost" type="xs:float" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SourceCostDetail">
		<xs:annotation>
			<xs:documentation>Contains Unit cost info about a Source item BEFORE normalisation of currency and markups</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SourceUnitCost" type="xs:float" use="required"/>
		<xs:attribute name="SourceCurrency" type="CurrencyCode" use="required"/>
		<xs:attribute name="UnitCost" type="xs:float" use="required"/>
		<xs:attribute name="UnitMarkup" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="PricingAudit">
		<xs:annotation>
			<xs:documentation>An audit of profit</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Currency" type="CurrencyCode" use="required"/>
		<xs:attribute name="TotalCost" type="xs:float" use="required"/>
		<xs:attribute name="TotalPrice" type="xs:float" use="required"/>
		<xs:attribute name="Profit" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="PaymentCardCharge">
		<xs:annotation>
			<xs:documentation>Describes a possible payment card charge</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AcceptableAuthMode" type="FABCardPaymentAuthorisationMode" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="CardType" type="FABPaymentCardType" use="required"/>
		<xs:attribute name="Amount" type="xs:float" use="required"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="Itinerary">
		<xs:annotation>
			<xs:documentation>Describes a complete holiday itinerary which can contain many travel segments and accommodations. This can just consist of an itinerary id linking it to a pre-defined itinerary within the FAB system.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelSegments" type="TravelSegmentList" minOccurs="0"/>
			<xs:element name="AccommodationSegments" type="AccommodationSegmentList" minOccurs="0"/>
			<xs:element name="CruisePackageSegments" type="CruisePackageList" minOccurs="0"/>
			<xs:element name="ImportantInformation" type="ErrataList" minOccurs="0"/>
			<xs:element name="Vehicles" type="VehicleList" minOccurs="0"/>
			<xs:element name="CarParks" type="CarParkList" minOccurs="0"/>
			<xs:element name="OptionalExtras" type="OptionalExtrasList" minOccurs="0"/>
			<xs:element name="ChosenChoices" type="ChosenChoiceList" minOccurs="0"/>
			<xs:element name="ItineraryCost" type="HolidayCost" minOccurs="0"/>
			<xs:element name="ItineraryOptions" type="ItineraryOptions" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SeatOptions" type="SeatOptions" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Component" type="ItineraryComponent" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="TermsAndConditions" type="TermsAndConditions" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PostBookingPolicyInfo" type="PostBookingPolicyInfo" minOccurs="0"/>
			<xs:element name="FOIDAllowed" type="FOIDList" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ComponentIdentity" type="ComponentIdentity" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ComponentPricingGroup" type="ComponentPricingGroup" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ItineraryId" type="xs:string" use="optional"/>
		<xs:attribute name="ItineraryReference" type="xs:string" use="optional"/>
		<xs:attribute name="StartDate" type="FABDate" use="optional"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="NumNights" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="Availability" type="FABAvailabilityStatus" use="optional"/>
		<xs:attribute name="BookableByFab" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="PerPassengerCost" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="PassengerIdRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for PassengerId in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PassengerIdMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket you must provide a value for PassengerId in each Customer attached to the basket. If this is set to false, but PassengerIdRequired is set to true, then FAB is able to book the Itinerary with or without FOID information at the booking stage. However, if no FOID info is provided to FAB, FOID information will normally be required by the supplier PRIOR to departure</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NationalityRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for Nationality in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="VatRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for Nationality in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NationalityMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket must provide a value for Nationality in each Customer attached to the basket. If this is set to false, but NationalityRequired is set to true, then FAB is able to book the Itinerary with or without FOID information at the booking stage. However, if no Nationality is provided to FAB,  will normally be required by the supplier PRIOR to departure</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PassengerFullMiddleNameMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket must provide the middle name in the MiddleInitial field for each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ComponentIdentity">
		<xs:annotation>
			<xs:documentation>It is possible to construct an Itinerary from one or more ComponentIdentity elements. This provides support for integrating functionality between the FAB 2.0 and FAB 1.0 Systems. You must include an IDentity string and if the Identity relates to an AccomUnit then you can also provide an associated OccupancyDetails element.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OccupancyDetails" type="OccupancyDetails" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Identity" type="xs:string" use="required"/>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ItineraryComponent">
		<xs:annotation>
			<xs:documentation>Each supplier component in the itinerary has an associated ItineraryComponent</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="BookingChannel" type="FABBookingChannel" use="required"/>
		<xs:attribute name="BookingChannelName" type="xs:string" use="optional"/>
		<xs:attribute name="ProductType" type="FABProductType" use="optional"/>
		<xs:attribute name="SupplierType" type="FABSupplierType" use="optional"/>
		<xs:attribute name="ATOLNumber" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TermsAndConditions">
		<xs:annotation>
			<xs:documentation>Each supplier in the itinerary can have associated Terms and Conditions</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="Type" type="xs:string" use="required"/>
		<xs:attribute name="Version" type="xs:integer" use="required"/>
		<xs:attribute name="Text" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ItineraryOptions">
		<xs:annotation>
			<xs:documentation>Describes a set of options available for the associated itinerary. This might contain some car hire options or other optional extras.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FlightOption" type="TravelSegment" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AccommodationUnitOption" type="AccommodationUnit" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="BoardBasisOption" type="BoardBasisOption" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="VehicleOption" type="Vehicle" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="CarParkOption" type="CarPark" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="OptionalExtra" type="OptionalExtraInfo" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ChosenOptionalExtra" type="OptionalExtra" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="OptionalExtraGroupRule" type="GroupRule" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Choice" type="Choice" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DiningOptions" type="DiningOptions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SeatOptions">
		<xs:sequence>
			<xs:element name="SeatBand" type="SeatBand" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Seat" type="Seat" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="FlightNumber" type="xs:string" use="required"/>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="AircraftType" type="xs:string" use="optional"/>
		<xs:attribute name="NumberOfBlocks" type="xs:integer" use="optional"/>
		<xs:attribute name="Currency" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ItineraryContainer">
		<xs:annotation>
			<xs:documentation>super class for itinerary containers like shortlistitem and basket</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Itinerary" type="Itinerary"/>
		</xs:sequence>
		<xs:attribute name="CurrentlyActive" type="xs:boolean" use="required"/>
		<xs:attribute name="Status" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ShortListItem">
		<xs:annotation>
			<xs:documentation>A ShortList Item consists of an Itinerary and also a set of options for that itinerary.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ItineraryContainer">
				<xs:sequence>
					<xs:element name="Error" type="FABError" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ItineraryIdList">
		<xs:annotation>
			<xs:documentation>List of itinerary IDs</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ItineraryId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ItineraryList">
		<xs:annotation>
			<xs:documentation>List of itineraries or Itinerary Ids</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Itinerary" type="Itinerary" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ItineraryId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionalExtrasList">
		<xs:annotation>
			<xs:documentation>List of OptionalExtras</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OptionalExtra" type="OptionalExtra" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionsList">
		<xs:annotation>
			<xs:documentation>List of OptionalExtraInfo objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OptionalExtra" type="OptionalExtraInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="GroupRule">
		<xs:annotation>
			<xs:documentation>A rule that governs what things can be used with what others</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ID" type="xs:string" maxOccurs="unbounded"/>
			<xs:element name="Required" type="Required" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="RuleCode" type="FABGroupRuleCode" use="required"/>
		<xs:attribute name="BookingElementID" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Required">
		<xs:sequence>
			<xs:element name="ID" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="QuantityToUnlock" type="xs:integer" use="required"/>
		<xs:attribute name="QuantityUnlocked" type="xs:integer" use="optional"/>
		<xs:attribute name="MaximumUnlockable" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="OptionalExtraInfo">
		<xs:annotation>
			<xs:documentation>Info  about a Holiday Extra and it's various sub options. Like Ski passes or Transfer or other things.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SubCategory" type="SubCategory" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PeriodPrice" type="PeriodPrice" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Image" type="ImageItem" minOccurs="0"/>
			<xs:element name="MoreInfoText" type="MoreInfoText" minOccurs="0"/>
			<xs:element name="OptionalExtraInformation" type="OptionalExtraInformation" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AccommodationIds" type="AccommodationIdList" minOccurs="0"/>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
			<xs:element name="SourceCost" type="SourceCostDetail" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ID" type="xs:string" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="Code" type="xs:string" use="required"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="optional"/>
		<xs:attribute name="FPC" type="xs:string" use="optional"/>
		<xs:attribute name="Type" type="FABOptionalExtraType" use="optional"/>
		<xs:attribute name="AdditionalInfoPrompt" type="xs:string" use="optional"/>
		<xs:attribute name="Ranking" type="xs:integer" use="optional"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="AirportCode" type="TravelPointCode" use="optional"/>
		<xs:attribute name="RequiresAccommodationInformation" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Indicates if accommodation information is required for this option.
					If no Accommodation is present in the itinerary, then the accommodation
					information should be specified in the AdditionalItineraryInfo element.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="QuantityAvailable" type="xs:integer" use="optional"/>
		<xs:attribute name="MinAge" type="xs:integer" use="optional"/>
		<xs:attribute name="MaxAge" type="xs:integer" use="optional"/>
		<xs:attribute name="UnitCost" type="xs:float" use="optional"/>
		<xs:attribute name="ChildUnitCost" type="xs:float" use="optional"/>
		<xs:attribute name="CurrencyCode" type="CurrencyCode" use="optional"/>
		<xs:attribute name="ApplyTo" type="FABApplyToType" use="optional"/>
		<xs:attribute name="PriceType" type="FABPriceType" use="optional"/>
		<xs:attribute name="DateRequired" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="Default" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="UnitCostMultiplier" type="FABUnitCostMultiplierType" use="optional"/>
		<xs:attribute name="SubType" type="TransferType" use="optional"/>
		<xs:attribute name="EstimatedCardChargeIncrease" type="xs:float" use="optional"/>
		<xs:attribute name="RequiresOptionDetailsSearch" type="xs:boolean" use="optional"/>
		<!--<xs:attribute name="RequiresTravelSegmentInformation" type="xs:boolean" use="optional"/>-->
	</xs:complexType>
	<xs:complexType name="OptionalExtraInformation"/>
	<xs:complexType name="TransferOptionalExtraInformation">
		<xs:complexContent>
			<xs:extension base="OptionalExtraInformation">
				<xs:attribute name="MaxPaxPerUnit" type="xs:integer"/>
				<xs:attribute name="JourneyTime" type="xs:string"/>
				<xs:attribute name="ReturnPickupTime" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MoreInfoText" mixed="true">
		<xs:sequence>
			<xs:element name="General" type="xs:string" minOccurs="0"/>
			<xs:element name="ArrivalDate" type="xs:string" minOccurs="0"/>
			<xs:element name="ArrivalTime" type="xs:string" minOccurs="0"/>
			<xs:element name="ReturnDate" type="xs:string" minOccurs="0"/>
			<xs:element name="ReturnTime" type="xs:string" minOccurs="0"/>
			<xs:element name="Location" type="xs:string" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DetailedCarParkInfo">
		<xs:annotation>
			<xs:documentation>More specific info about a carpark option</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="MoreInfoText">
				<xs:attribute name="CarRegistrationRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="CarMakeRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="CarModelRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="CarColourRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="OutboundFlightNumberRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="ReturnFlightNumberRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="OutboundTerminalNumberRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="ReturnTerminalNumberRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="DestinationRequired" type="xs:boolean" use="required"/>
				<xs:attribute name="MobileNumberRequired" type="xs:boolean" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RequiredCarParkBookingCarDetails">
		<xs:annotation>
			<xs:documentation>Required car details for car park booking</xs:documentation>
		</xs:annotation>
		<xs:attribute name="CarRegistration" type="xs:string" use="optional"/>
		<xs:attribute name="CarMake" type="xs:string" use="optional"/>
		<xs:attribute name="CarModel" type="xs:string" use="optional"/>
		<xs:attribute name="CarColour" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="RequiredCarParkBookingOtherDetails">
		<xs:annotation>
			<xs:documentation>Other Required details for car park booking</xs:documentation>
		</xs:annotation>
		<xs:attribute name="OutboundFlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnFlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="OutboundTerminalNumber" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnTerminalNumber" type="xs:string" use="optional"/>
		<xs:attribute name="Destination" type="xs:string" use="optional"/>
		<xs:attribute name="MobileNumber" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="OptionsSearchRequest">
		<xs:annotation>
			<xs:documentation>A Options Search request details the criteria of the search, the search strategy and also how the results should be returned. Simply extends FABSearchRequest</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="SearchCriteria" type="OptionsSearchDetails">
						<xs:annotation>
							<xs:documentation>Details the initial criteria of the search</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OptionDetailsSearchRequest">
		<xs:annotation>
			<xs:documentation>An Option Details Search request will allow FAB to return more details on OptionalExtras that require this extra step before costing. Simply extends OptionsSearchRequest</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="OptionsSearchRequest">
				<xs:sequence>
					<xs:element name="OptionalExtras" type="OptionalExtrasList"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OptionsSearchDetails">
		<xs:complexContent>
			<xs:extension base="FABSearchDetails">
				<xs:annotation>
					<xs:documentation>Defines a set of search criteria for finding options within the FAB system.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Suppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="ExcludeSuppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="AccommodationIds" type="AccommodationIdList" minOccurs="0"/>
					<xs:element name="ChildAge" type="xs:integer" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="NumberOfAdults" type="RequiredPaxCount" use="optional" default="1"/>
				<xs:attribute name="NumberOfChildren" type="OptionalPaxCount" use="optional" default="0"/>
				<xs:attribute name="NumberOfInfants" type="OptionalPaxCount" use="optional" default="0"/>
				<xs:attribute name="Date" type="FABDate" use="required"/>
				<xs:attribute name="Duration" type="xs:integer" use="optional"/>
				<xs:attribute name="Time" type="FABTime" use="optional"/>
				<xs:attribute name="Airport" type="TravelPointCode" use="optional"/>
				<xs:attribute name="ResortId" type="xs:string" use="optional"/>
				<xs:attribute name="ResortName" type="xs:string" use="optional"/>
				<xs:attribute name="ReturnDate" type="FABDate" use="optional"/>
				<xs:attribute name="ReturnTime" type="FABTime" use="optional"/>
				<xs:attribute name="OriginCountry" type="xs:string" use="optional"/>
				<xs:attribute name="LocationFrom" type="xs:string" use="optional"/>
				<xs:attribute name="LocationTo" type="xs:string" use="optional"/>
				<xs:attribute name="AllowExtendedAttractionsSearch" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OptionsSearchResponse">
		<xs:annotation>
			<xs:documentation>A OptionsSearchResponse contains information about the result set of the corresponding request as well as a view into that result set which is a list of OptionalExtraInfo objects</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:element name="Options" type="OptionsList"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PeriodPrice">
		<xs:annotation>
			<xs:documentation>Info  about a Holiday Extra and it's various sub options. Like Ski passes or Transfer or other things.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Price" type="Price" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="StartDate" type="FABDate" use="optional"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="Duration" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Price">
		<xs:annotation>
			<xs:documentation>details a price of something</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Amount" type="xs:float" use="optional"/>
		<xs:attribute name="PriceCode" type="xs:string" use="optional"/>
		<xs:attribute name="PriceDescription" type="xs:string" use="optional"/>
		<xs:attribute name="CurrencyCode" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="Basis" type="FABPricingType" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SubCategory">
		<xs:annotation>
			<xs:documentation>Sub category</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Code" type="xs:string" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="OptionalExtra">
		<xs:annotation>
			<xs:documentation>A holiday OptionalExtra. Like Ski passes or Transfer or other things.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AdditionalItineraryInfo" type="AdditionalItineraryInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Status" type="FABStatus" use="optional"/>
		<xs:attribute name="ID" type="xs:string" use="optional"/>
		<xs:attribute name="Code" type="xs:string" use="required"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="optional"/>
		<xs:attribute name="SubCategoryCode" type="xs:string" use="optional"/>
		<xs:attribute name="PriceCode" type="xs:string" use="optional"/>
		<xs:attribute name="StartDate" type="FABDate" use="optional"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="Duration" type="xs:string" use="optional"/>
		<xs:attribute name="Quantity" type="xs:integer" use="optional"/>
		<xs:attribute name="AdditionalInfo" type="xs:string" use="optional"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="ResortName" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="BoardBasisOption">
		<xs:annotation>
			<xs:documentation>A meal plan code along with a per person supplement price</xs:documentation>
		</xs:annotation>
		<xs:attribute name="BoardCode" type="MealPlanCode" use="required"/>
		<xs:attribute name="PerPersonSupplement" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="Choice">
		<xs:annotation>
			<xs:documentation>Describes a mutally exclusive set of options, one of which must be chosen. If no choice is made, the default ordering will decide the choice. If there is no default ordering, the first option will be chosen.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Option" type="ChoiceOption" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Identity" type="xs:string" use="required"/>
		<xs:attribute name="Description" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ChoiceOption">
		<xs:annotation>
			<xs:documentation>Describes an option in a  mutally exclusive set of options, one of which must be chosen. </xs:documentation>
		</xs:annotation>
		<xs:attribute name="Value" type="xs:string" use="required"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="Cost" type="xs:float" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ChosenChoice">
		<xs:annotation>
			<xs:documentation>Chooses one value of a mutually exclusive set of choices.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Identity" type="xs:string" use="required"/>
		<xs:attribute name="Value" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ChosenChoiceList">
		<xs:annotation>
			<xs:documentation>List of ChosenChoice objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ChosenChoice" type="ChosenChoice" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Errata">
		<xs:annotation>
			<xs:documentation>Errata contain useful information about the holiday which must be shown to the end user. It can detail things like "Hotel is next to the airport, so expect aircraft noise" or "3 hour transfer required to get to hotel"</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SupplierCode" type="xs:string" use="optional"/>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Code" type="xs:string" use="optional"/>
		<xs:attribute name="Text" type="xs:string" use="required"/>
		<xs:attribute name="AppliesTo" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ErrataList">
		<xs:annotation>
			<xs:documentation>List of Erratas</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Errata" type="Errata" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Vehicle">
		<xs:annotation>
			<xs:documentation>Details a Hire Car</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Image" type="ImageItem" minOccurs="0"/>
			<xs:element name="MoreInfoText" type="xs:string" minOccurs="0"/>
			<xs:element name="MoreInfoTexts" type="MoreInfoTexts" minOccurs="0"/>
			<xs:element name="PickUpDepotDetails" type="DepotDetails" minOccurs="0"/>
			<xs:element name="DropOffDepotDetails" type="DepotDetails" minOccurs="0"/>
			<xs:element name="ThirdPartyProvider" type="Company" minOccurs="0"/>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
			<xs:element name="AdditionalItineraryInfo" type="AdditionalItineraryInfo" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
		<xs:attribute name="StartDate" type="FABDate" use="optional"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="PickUpPoint" type="TravelPointCode" use="optional"/>
		<xs:attribute name="PickUpPointDescription" type="xs:string" use="optional"/>
		<xs:attribute name="DropOffPoint" type="TravelPointCode" use="optional"/>
		<xs:attribute name="DropOffPointDescription" type="xs:string" use="optional"/>
		<xs:attribute name="PickUpTime" type="FABTime" use="optional"/>
		<xs:attribute name="DropOffTime" type="FABTime" use="optional"/>
		<xs:attribute name="VehicleClass" type="xs:string" use="optional"/>
		<xs:attribute name="VehicleCode" type="xs:string" use="required"/>
		<xs:attribute name="AutomaticTransmission" type="xs:boolean" use="optional"/>
		<xs:attribute name="AirConditioning" type="xs:boolean" use="optional"/>
		<xs:attribute name="BasicCost" type="xs:float" use="optional"/>
		<xs:attribute name="CurrencyCode" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="PerExtraDayCost" type="xs:float" use="optional"/>
		<xs:attribute name="PerExtraWeekCost" type="xs:float" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="Identity" type="xs:string" use="optional"/>
		<xs:attribute name="BookableByFAB" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="BookingChannel" type="FABBookingChannel" use="optional" default="VTX"/>
		<xs:attribute name="MinDriverAge" type="xs:integer" use="optional"/>
		<xs:attribute name="AdultCapacity" type="xs:integer" use="optional"/>
		<xs:attribute name="ChildCapacity" type="xs:integer" use="optional"/>
		<xs:attribute name="LargeBaggageCapacity" type="xs:integer" use="optional"/>
		<xs:attribute name="SmallBaggageCapacity" type="xs:integer" use="optional"/>
		<xs:attribute name="DoorCount" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Company">
		<xs:attribute name="Name" type="xs:string" use="optional"/>
		<xs:attribute name="Code" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="MoreInfoTexts">
		<xs:annotation>
			<xs:documentation>More Info Texts Split down by header where possible</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="MoreInfo" type="MoreInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MoreInfo">
		<xs:attribute name="Header" type="xs:string" use="optional"/>
		<xs:attribute name="Text" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="VehicleList">
		<xs:annotation>
			<xs:documentation>List of Car objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Vehicle" type="Vehicle" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RequiredDetails">
		<xs:annotation>
			<xs:documentation>Describes car details, for car parking purposes</xs:documentation>
		</xs:annotation>
		<xs:attribute name="OutboundFlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnFlightNumber" type="xs:string" use="optional"/>
		<xs:attribute name="OutboundTerminalNumber" type="xs:string" use="optional"/>
		<xs:attribute name="ReturnTerminalNumber" type="xs:string" use="optional"/>
		<xs:attribute name="Destination" type="xs:string" use="optional"/>
		<xs:attribute name="MobileNumber" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="RequestedTimeInfo">
		<xs:attribute name="ArrivalDate" type="FABDate" use="required"/>
		<xs:attribute name="ArrivalTime" type="FABTime" use="required"/>
		<xs:attribute name="DepartDate" type="FABDate" use="required"/>
		<xs:attribute name="DepartTime" type="FABTime" use="required"/>
	</xs:complexType>
	<xs:complexType name="CarPark">
		<xs:annotation>
			<xs:documentation>Details a car park</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Address" type="Address"/>
			<xs:element name="SupplierLogo" type="ImageItem" minOccurs="0"/>
			<xs:element name="CarDetails" type="CarDetails" minOccurs="0"/>
			<xs:element name="RequestedTimeInfo" type="RequestedTimeInfo"/>
			<xs:element name="RequiredDetails" type="RequiredDetails" minOccurs="0"/>
			<xs:element name="AdditionalItineraryInfo" type="AdditionalItineraryInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="AirportCode" type="TravelPointCode" use="optional"/>
		<xs:attribute name="Latitude" type="xs:string" use="optional"/>
		<xs:attribute name="Longitude" type="xs:string" use="optional"/>
		<xs:attribute name="DistanceToTarget" type="xs:string" use="optional"/>
		<xs:attribute name="SecurityInformation" type="xs:string" use="optional"/>
		<xs:attribute name="VehicleRestrictions" type="xs:string" use="optional"/>
		<xs:attribute name="ArrivalInstructions" type="xs:string" use="optional"/>
		<xs:attribute name="AirportTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="DepartureInstructions" type="xs:string" use="optional"/>
		<xs:attribute name="ParkingService" type="xs:boolean" use="optional"/>
		<xs:attribute name="ValetService" type="xs:boolean" use="optional"/>
		<xs:attribute name="MinimumStay" type="xs:int" use="optional"/>
		<xs:attribute name="MaximumStay" type="xs:int" use="optional"/>
		<xs:attribute name="BasicCost" type="xs:float" use="required"/>
		<xs:attribute name="OriginalCost" type="xs:float" use="optional"/>
		<xs:attribute name="CurrencyCode" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="Identity" type="xs:string" use="required"/>
		<xs:attribute name="CarRegistrationRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="CarMakeRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="CarModelRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="CarColourRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="OutboundFlightNumberRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="ReturnFlightNumberRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="OutboundTerminalNumberRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="ReturnTerminalNumberRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="DestinationRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="MobileNumberRequired" type="xs:boolean" use="required"/>
		<xs:attribute name="CreditCardRequired" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CarParkList">
		<xs:annotation>
			<xs:documentation>List of car park objects</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CarPark" type="CarPark" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="VehicleSearchRequest">
		<xs:annotation>
			<xs:documentation>A VehicleSearchRequest details the criteria of the search, the search strategy and also how the results should be returned. Simply extends FABSearchRequest</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="SearchCriteria" type="VehicleSearchDetails">
						<xs:annotation>
							<xs:documentation>Details the initial criteria of the search</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="VehicleSearchResponse">
		<xs:annotation>
			<xs:documentation>A VehicleSearchResponse contains information about the result set of the corresponding request as well as a view into that result set which is a list of vehicle objects</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:element name="Vehicles" type="VehicleList">
						<xs:annotation>
							<xs:documentation>List of Vehicles that is a viewing window into the result set that satisfies the constraints of the original request.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CarParkSearchDetails">
		<xs:complexContent>
			<xs:extension base="FABSearchDetails">
				<xs:annotation>
					<xs:documentation>Defines a set of search criteria for finding car parks within the FAB system.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Suppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="ExcludeSuppliers" type="SupplierList" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="DropOffDate" type="FABDate" use="required"/>
				<xs:attribute name="DropOffTime" type="FABTime" use="required"/>
				<xs:attribute name="Location" type="TravelPointCode" use="required"/>
				<xs:attribute name="PickupDate" type="FABDate" use="required"/>
				<xs:attribute name="PickupTime" type="FABTime" use="required"/>
				<xs:attribute name="Terminal" type="xs:string" use="optional"/>
				<xs:attribute name="ParkingType" type="ParkingServiceType" use="optional"/>
				<xs:attribute name="NumberOfPassengers" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="ParkingServiceType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ON airport"/>
			<xs:enumeration value="OFF airport"/>
			<xs:enumeration value="Valet parking"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CarParkSearchRequest">
		<xs:annotation>
			<xs:documentation>A CarParkSearchRequest details the criteria of the search, the search strategy and also how the results should be returned. Simply extends FABSearchRequest</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="SearchCriteria" type="CarParkSearchDetails">
						<xs:annotation>
							<xs:documentation>Details the initial criteria of the search</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CarParkSearchResponse">
		<xs:annotation>
			<xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:element name="CarParks" type="CarParkList">
						<xs:annotation>
							<xs:documentation>List of car parks is a viewing window into the result set that satisfies the constraints of the original request.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="VehicleSearchDetails">
		<xs:complexContent>
			<xs:extension base="FABSearchDetails">
				<xs:annotation>
					<xs:documentation>Defines a set of search criteria for finding vehicles within the FAB system.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Suppliers" type="SupplierList" minOccurs="0"/>
					<xs:element name="ExcludeSuppliers" type="SupplierList" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="StartDate" type="FABDate" use="required"/>
				<xs:attribute name="PickUpTime" type="FABTime" use="required"/>
				<xs:attribute name="PickUpPoint" type="TravelPointCode" use="optional"/>
				<xs:attribute name="EndDate" type="FABDate" use="required"/>
				<xs:attribute name="DropOffTime" type="FABTime" use="required"/>
				<xs:attribute name="DropOffPoint" type="TravelPointCode" use="optional"/>
				<xs:attribute name="AgeOfDriverIfUnder25" type="xs:integer" use="optional"/>
				<xs:attribute name="PickUpLocation" type="xs:string" use="optional"/>
				<xs:attribute name="DropOffLocation" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="ExternalHandoffPreference">
		<xs:restriction base="xs:string">
			<xs:enumeration value="RequestNoHandoff"/>
			<xs:enumeration value="SyndicatorDefault"/>
			<xs:enumeration value="RequestHandoff"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ShortListRequest">
		<xs:annotation>
			<xs:documentation>A shortlist request performs functions on a sessions ShortList structure. These operations include 1) adding itineraries, 2) removing itineraries and 3) altering the associated party information. A shortlist request always returns a short list response detailing the current short list.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddItineraries" type="ItineraryList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Your shortlist can contain upto 8 Itineraries, although you must only add upto 4 at a time.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="RemoveItineraries" type="ItineraryIdList" minOccurs="0"/>
			<xs:element name="PartyInfo" type="PartyInfo" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Info about the party that is required to produce a quick-cost for each itinerary in the shortlist. The first FABShortListRequest in a session MUST include this party information, otherwise an error will be returned. Each subsequent ShortList request can omit this information unless a change is required.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="5">
			<xs:annotation>
				<xs:documentation>If the current shortlist consists solely of CostedItineraries that have achived "quick-Cost" status OR are in fact unavailable then a ShortList request will always return immediately. If that is not the case, the FAB system will wait the indicated amount of seconds before returning the current shortlist, unless the previously indicated state is reached while waiting, in which case the reponse will then get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current shortlist without waiting. This allows consumers of the service to poll the shortlist for updated information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="HandoffPreference" type="ExternalHandoffPreference" use="optional" default="SyndicatorDefault"/>
	</xs:complexType>
	<xs:complexType name="PartyInfo">
		<xs:annotation>
			<xs:documentation>
				In order to produce a valid quick cost, we must have
				information about the party that will be taking the
				holiday. This includes the number of adults and infants
				(under 2 yrs) and the ages of any younger travelers
				(2-21 yrs) as well as other information, such as travel
				insurance wishes and the preferred number of rooms.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="YoungPersonAge" type="YoungPersonAge" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						Details the ages of any young travellers aged 2
						to 21, required for producing a valid quick
						cost.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="NumberOfAdults" type="OptionalPaxCount" use="required"/>
		<xs:attribute name="NumberOfInfants" type="OptionalPaxCount" use="optional" default="0"/>
		<xs:attribute name="ThirdPartyInsurance" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="ThirdPartyInsurerName" type="xs:string" use="optional"/>
		<xs:attribute name="PreferredNumberOfRooms" type="xs:positiveInteger" use="optional"/>
		<xs:attribute name="DefaultMealOkay" type="xs:boolean" use="optional"/>
		<xs:attribute name="DefaultResortTransferOkay" type="xs:boolean" use="optional"/>
		<xs:attribute name="DefaultDonationOkay" type="xs:boolean" use="optional"/>
		<xs:attribute name="DefaultBaggageOkay" type="xs:boolean" use="optional"/>
		<xs:attribute name="SelectFreeTransfers" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ShortList">
		<xs:annotation>
			<xs:documentation>The FAB Shortlist can contain upto 8 itineraries at any one time.The FAB system will automatically check real-time availability and generate a party "quick-cost" for each itinerary added to the shortlist.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Item" type="ShortListItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PartyInfo" type="PartyInfo"/>
		</xs:sequence>
		<xs:attribute name="CurrentlyActive" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>If the current shortlist consists solely of CostedItineraries that have achived "quick-Cost" status OR are in fact unavailable then a ShortList request will always return immediately. If that is not the case, the FAB system will wait the indicated amount of seconds before returning the current shortlist, unless the previously indicated state is reached while waiting, in which case the reponse will then get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current shortlist without waiting. This allows consumers of the service to poll the shortlist for updated information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="AccommodationInfoRequest">
		<xs:annotation>
			<xs:documentation>A request for information about a particualar accommodation (Hotel, Apartments etc). Can include a hyperlink to a picture of the accommodation.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="AccommodationId" type="xs:string" use="optional"/>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="optional"/>
		<xs:attribute name="AccommodationCode" type="xs:string" use="optional"/>
		<xs:attribute name="AccommodationName" type="xs:string" use="optional"/>
		<xs:attribute name="DestinationAirport" type="xs:string" use="optional"/>
		<xs:attribute name="SupplierLocationId" type="xs:string" use="optional"/>
		<xs:attribute name="ItineraryId" type="xs:string" use="optional"/>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="60"/>
	</xs:complexType>
	<xs:complexType name="AccommodationInfo">
		<xs:annotation>
			<xs:documentation>An object that provides information about a specific Accommodation including an Image object with an embedded url to a picture of the accommodation</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BrochureInfo" type="BrochureInfo"/>
			<xs:element name="AccommodationImage" type="ImageItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SupplierLogo" type="ImageItem" minOccurs="0"/>
			<xs:element name="Airport" type="TravelPointCode" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Attribute" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Address" type="Address" minOccurs="0"/>
			<xs:element name="GeoPosition" type="GeoPosition" minOccurs="0"/>
			<xs:element name="ThirdPartyReference" type="ThirdPartyReference" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
		<xs:attribute name="AccommodationCode" type="xs:string" use="required"/>
		<xs:attribute name="AccommodationName" type="xs:string" use="required"/>
		<xs:attribute name="ResortName" type="xs:string" use="optional"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="CountryCode" type="ISO3166" use="optional"/>
		<xs:attribute name="NumberOfRooms" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="Copyright" type="xs:string" use="optional"/>
		<xs:attribute name="StarRating" type="xs:string" use="optional"/>
		<xs:attribute name="TelephoneNumber" type="xs:string" use="optional"/>
		<xs:attribute name="EmailAddress" type="xs:string" use="optional"/>
		<xs:attribute name="LanguageCode" type="xs:string" default="EN"/>
	</xs:complexType>
	<xs:complexType name="ResortInfoRequest">
		<xs:annotation>
			<xs:documentation>Returns information about the given resortID</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ResortInfo">
		<xs:annotation>
			<xs:documentation>Provides information about a particular resort.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ResortInfoItem" type="ResortInfoItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ResortImageItem" type="ImageItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="GeoPosition" type="GeoPosition" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ResortID" type="xs:string"/>
		<xs:attribute name="ContentSupplier" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="ResortInfoItem">
		<xs:annotation>
			<xs:documentation>A flexible structure for holiding items of interest about a particular Resort.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Header" type="xs:string" use="required"/>
		<xs:attribute name="Content" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="TourItineraryRequest">
		<xs:annotation>
			<xs:documentation>A request for information about a particualar tour (Cruise, Coach etc).</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TourItinerarySegment" type="TourItinerarySegment" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="SupplierCode"/>
		<xs:attribute name="TourCode" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="TourItinerarySegment">
		<xs:annotation>
			<xs:documentation>Return part of itinerary defined by given attributes.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="EmbarkPortPoint" type="TravelPoint"/>
			<xs:element name="DisembarkPortPoint" type="TravelPoint"/>
		</xs:sequence>
		<xs:attribute name="EmbarkDate" type="FABDate" use="required"/>
		<xs:attribute name="DisembarkDate" type="FABDate" use="required"/>
	</xs:complexType>
	<xs:complexType name="TourItineraryInfo">
		<xs:annotation>
			<xs:documentation>An object that provides information about a specific tour including an Image object with an embedded url to a picture of the tour.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TourItineraryImage" type="ImageItem" minOccurs="0"/>
			<xs:element name="TourItineraries" type="TourItineraries" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="required"/>
		<xs:attribute name="TourCode" type="xs:string" use="required"/>
		<xs:attribute name="VehicleName" type="xs:string" use="optional"/>
		<xs:attribute name="TourName" type="xs:string" use="optional"/>
		<xs:attribute name="LanguageCode" type="xs:string" default="EN"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TourItineraries">
		<xs:annotation>
			<xs:documentation>An object that provides information about a specific tour itinerary (locations and date/times etc).</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TourItinerary" type="TourItinerary" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TourItinerary">
		<xs:sequence>
			<xs:element name="LocationPoint" type="TravelPoint" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="DayNumber" type="xs:nonNegativeInteger" use="required"/>
		<xs:attribute name="Location" type="xs:string" use="optional"/>
		<xs:attribute name="ArrivalTime" type="FABDateTime" use="optional"/>
		<xs:attribute name="BoardingTime" type="FABDateTime" use="optional"/>
		<xs:attribute name="DepartureTime" type="FABDateTime" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CruiseShipRequest">
		<xs:annotation>
			<xs:documentation>Information about a specific cruise ship.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="optional"/>
		<xs:attribute name="CruiseShipName" type="xs:string" use="optional"/>
		<xs:attribute name="CruiseShipCode" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CruiseShip">
		<xs:annotation>
			<xs:documentation>An object that provides information about a specific cruise ship.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CruiseShipImages" type="CruiseShipImages" minOccurs="0"/>
			<xs:element name="ShipDescription" type="CruiseShipDescription" minOccurs="0"/>
			<xs:element name="Facilities" type="Facilities" minOccurs="0"/>
			<xs:element name="Specification" type="ShipSpecification" minOccurs="0"/>
			<xs:element name="Cabins" type="Cabins" minOccurs="0"/>
			<xs:element name="DeckPlans" type="DeckPlans" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="required"/>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="ShipClass" type="xs:string" use="optional"/>
		<xs:attribute name="LanguageCode" type="xs:string" default="EN"/>
		<xs:attribute name="ShipCode" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CruiseShipDescription">
		<xs:sequence>
			<xs:element name="DescriptionEntry" type="DescriptionEntry" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DescriptionEntry">
		<xs:simpleContent>
			<xs:extension base="xsd:string">
				<xs:attribute name="Header" type="xsd:string"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="CruiseShipImages">
		<xs:sequence>
			<xs:element name="CruiseShipImage" type="ImageItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruiseCategories">
		<xs:sequence>
			<xs:element name="CruiseCategory" type="CruiseCategory" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruiseCategory">
		<xs:sequence>
			<xs:element name="OccupancyDetails" type="OccupancyDetails" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="CabinRate" type="CabinRate" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ChosenCabinRate" type="CabinRate" minOccurs="0"/>
			<xs:element name="AvailableCabins" type="Cabins" minOccurs="0"/>
			<xs:element name="ChosenCabins" type="Cabins" minOccurs="0"/>
			<xs:element name="CategoryOptions" type="ItineraryOptions" minOccurs="0"/>
			<xs:element name="ChosenCategoryOptions" type="ItineraryOptions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="CruiseCategoryId" type="xs:string" use="optional"/>
		<xs:attribute name="CruiseCategoryName" type="xs:string" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="CruiseCategoryCode" type="xs:string" use="optional"/>
		<xs:attribute name="CategoryType" type="CabinType" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Cabins">
		<xs:sequence>
			<xs:element name="Cabin" type="Cabin" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Cabin">
		<xs:complexContent>
			<xs:extension base="AccommodationUnitBase">
				<xs:annotation>
					<xs:documentation>An object that provides information about a cruise ship cabin.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="CabinRate" type="CabinRate" minOccurs="0"/>
					<xs:element name="CabinImages" type="CabinImages" minOccurs="0"/>
					<xs:element name="CabinOptions" type="CabinOptions" minOccurs="0"/>
					<xs:element name="ChosenCabinOptions" type="CabinOptions" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="CabinId" type="xs:string" use="optional"/>
				<xs:attribute name="PositionCode" type="CruiseShipPosition" use="optional"/>
				<xs:attribute name="ShipSideCode" type="CruiseShipSide" use="optional"/>
				<xs:attribute name="LocationCode" type="CruiseLocationCode" use="optional"/>
				<xs:attribute name="DeckCode" type="xs:string" use="optional"/>
				<xs:attribute name="DeckName" type="xs:string" use="optional"/>
				<xs:attribute name="IsGuaranteedCategory" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="Size" type="xs:string" use="optional"/>
				<xs:attribute name="Remark" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CabinImages">
		<xs:sequence>
			<xs:element name="CabinImage" type="ImageItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DeckPlans">
		<xs:sequence>
			<xs:element name="DeckPlan" type="DeckPlan" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DeckPlan">
		<xs:annotation>
			<xs:documentation>An object that provides information about a cruise ship deck plan.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DeckPlanKeyImage" type="ImageItem" minOccurs="0"/>
			<xs:element name="DeckPlanImage" type="ImageItem" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="Facilities">
		<xs:sequence>
			<xs:element name="Facility" type="Facility" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Facility">
		<xs:annotation>
			<xs:documentation>A facility which ship provides.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Quantity" type="xs:integer" use="optional"/>
		<xs:attribute name="AdditionalInfo" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ShipSpecification">
		<xs:annotation>
			<xs:documentation>Facts about a ship.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ShipOccupancy" type="xs:string" use="optional"/>
		<xs:attribute name="ShipCrew" type="xs:string" use="optional"/>
		<xs:attribute name="ShipTonnage" type="xs:string" use="optional"/>
		<xs:attribute name="ShipLength" type="xs:string" use="optional"/>
		<xs:attribute name="ShipBeam" type="xs:string" use="optional"/>
		<xs:attribute name="ShipDraft" type="xs:string" use="optional"/>
		<xs:attribute name="NoOfDecks" type="xs:string" use="optional"/>
		<xs:attribute name="NoOfCabins" type="xs:string" use="optional"/>
		<xs:attribute name="EnteredService" type="xs:string" use="optional"/>
		<xs:attribute name="CruisingSpeed" type="xs:string" use="optional"/>
		<xs:attribute name="ElectricitySupply" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelPoint">
		<xs:annotation>
			<xs:documentation>A list of 3 letter IATA Travel Point codes (e.g.Malaga = AGP)</xs:documentation>
		</xs:annotation>
		<xs:attribute name="TravelPointCode" type="TravelPointCode" use="required"/>
		<xs:attribute name="TravelPointName" type="xs:string" use="optional"/>
		<xs:attribute name="TravelPointShortName" type="xs:string" use="optional"/>
		<xs:attribute name="NamingAuthority" type="xs:string" use="optional"/>
		<xs:attribute name="CountryCode" type="ISO3166" use="optional"/>
		<xs:attribute name="IsMultiLeg" type="xs:boolean" use="optional"/>
		<xs:attribute name="TravelPointType" type="TravelPointType" use="optional"/>
		<xs:attribute name="AirToPortTransferTime" type="xs:integer" use="optional"/>
		<xs:attribute name="PortToAirTransferTime" type="xs:integer" use="optional"/>
		<xs:attribute name="Latitude" type="xs:decimal" use="optional"/>
		<xs:attribute name="Longitude" type="xs:decimal" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelPointList">
		<xs:annotation>
			<xs:documentation>A list of 3 letter IATA Travel Point codes (e.g.Malaga = AGP)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelPoint" type="TravelPoint" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelPointRequest">
		<xs:annotation>
			<xs:documentation>What travel points (airports mostly) are used by FAB for the given country code or resortId</xs:documentation>
		</xs:annotation>
		<xs:attribute name="CountryCode" type="ISO3166" use="optional"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="ExcludeUnReferencedAirports" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="Type" type="TravelPointType" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelPointResponse">
		<xs:annotation>
			<xs:documentation>What travel points (airports mostly) are used by FAB for the given country code or resortId</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelPointRequest" type="TravelPointRequest"/>
			<xs:element name="TravelPoints" type="TravelPointList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RouteRequest">
		<xs:annotation>
			<xs:documentation>What arrival points can be reached from the given departurePoint</xs:documentation>
		</xs:annotation>
		<xs:attribute name="DeparturePoint" type="TravelPointCode" use="required"/>
		<xs:attribute name="DirectOnly" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="RouteResponse">
		<xs:annotation>
			<xs:documentation>What arrival points can be reached from the given departurePoint</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RouteRequest" type="RouteRequest"/>
			<xs:element name="TravelPoints" type="TravelPointList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierRouteRequest">
		<xs:annotation>
			<xs:documentation>If a supplier list has been defined, the bookable routes available to the suppliers are returned. Otherwise the set of bookable suppliers for the syndicator is returned.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierList" type="SupplierList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierConfigRequest">
		<xs:annotation>
			<xs:documentation>Return a list of suppliers currently configured on the host for the calling syndicator</xs:documentation>
		</xs:annotation>
		<xs:attribute name="IncludeSupplierName" type="xs:boolean" default="true"/>
		<xs:attribute name="Type" type="FABProductType" default="Undefined"/>
	</xs:complexType>
	<xs:complexType name="SupplierConfigResponse">
		<xs:annotation>
			<xs:documentation>Contains list of suppliers currently configured on the host for the calling syndicator</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="EnabledSuppliers" type="SupplierInfo" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DisabledSuppliers" type="SupplierInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierInfo">
		<xs:annotation>
			<xs:documentation>A list of FAB supplier codes and names</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TermsAndConditionsRequest">
		<xs:annotation>
			<xs:documentation>Request Terms And Conditions for a supplier</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="Type" type="xs:string" use="optional"/>
		<xs:attribute name="Version" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:simpleType name="ContentFormat">
		<xs:annotation>
			<xs:documentation>Specifies the formatting type of content</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="raw"/>
			<xs:enumeration value="xhtml"/>
			<xs:enumeration value="unformatted"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="EquipmentInfoRequest">
		<xs:annotation>
			<xs:documentation>Request information on available equipment (eg Ski Packs).</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="EquipmentReference" type="xs:string" use="required"/>
		<xs:attribute name="ResponseFormat" type="ContentFormat" default="unformatted"/>
	</xs:complexType>
	<xs:complexType name="EquipmentInfoResponse">
		<xs:annotation>
			<xs:documentation>Info on generic content</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Content" type="FormattedContent" minOccurs="0"/>
			<xs:element name="Image" type="ImageItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="ProductSource" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="PortToAirportRequest">
		<xs:annotation>
			<xs:documentation>Request information on mappings between port code and airport code</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PortCode" type="PortCode" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PortToAirportResponse">
		<xs:annotation>
			<xs:documentation>Response containing mappings between port codes and airport codes </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PortToAirport" type="PortCodeTravelPoint" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PortToAirportMap">
		<xs:annotation>
			<xs:documentation>Contains a port code and the Travelpoints it maps to</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelPoint" type="PortCodeTravelPoint" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PortCodeTravelPoint">
		<xs:annotation>
			<xs:documentation>Contains information on a travel points location</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelPoint" type="TravelPoint"/>
		</xs:sequence>
		<xs:attribute name="PortCode" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:simpleType name="TravelPointType">
		<xs:annotation>
			<xs:documentation>Indicates what type of travelpoint a travel point is</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="AIRPORT"/>
			<xs:enumeration value="SEAPORT"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="SupplierRouteResponse">
		<xs:annotation>
			<xs:documentation>f a supplier list has been defined, the bookable routes available to the suppliers are returned. Otherwise the set of bookable suppliers for the syndicator is returned.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierRouteRequest" type="SupplierRouteRequest"/>
			<xs:element name="SupplierRoutes" type="RouteSetList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RouteSetList">
		<xs:annotation>
			<xs:documentation>A list of supplier routes from multiple departure points to multiple destinations.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RouteSet" type="RouteSet" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RouteSet">
		<xs:annotation>
			<xs:documentation>A set of routes from the departure point to the list of possible destination points for a supplier.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RouteSetElement" type="RouteSetElement" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="RouteSetElement">
		<xs:annotation>
			<xs:documentation>A departure point to multiple destinations.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DeparturePoint" type="TravelPoint"/>
			<xs:element name="DestinationPoints" type="TravelPointList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ResortRequest">
		<xs:annotation>
			<xs:documentation>What resorts can you get to from the given arrivalPointCode or resort</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="ResortName" type="xs:string" use="optional"/>
		<xs:attribute name="ArrivalPoint" type="TravelPointCode" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ResortResponse">
		<xs:annotation>
			<xs:documentation>What resorts can you get to from the given arrivalPointCode or resort</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ResortRequest" type="ResortRequest"/>
			<xs:element name="Resorts" type="ResortList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ResortTreeRequest">
		<xs:annotation>
			<xs:documentation>Request the entire resort tree</xs:documentation>
		</xs:annotation>
		<xs:attribute name="MinAccommodationCount" type="xs:integer" use="optional" default="1"/>
		<xs:attribute name="IncludeResortType" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="ResortTree">
		<xs:annotation>
			<xs:documentation>Shows resorts in a hierarchical tree structure</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Root" type="ResortTreeNode"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ResortTreeNode">
		<xs:annotation>
			<xs:documentation>Shows resorts in a hierarchical tree structure</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Resort" type="Resort"/>
			<xs:element name="Child" type="ResortTreeNode" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="AccommodationCount" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AccommodationsRequest">
		<xs:annotation>
			<xs:documentation>Request details of accommodations in the given resort</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ResortId" type="xs:string"/>
		<xs:attribute name="Offset" type="xs:nonNegativeInteger" use="optional" default="0"/>
		<xs:attribute name="Length" type="xs:nonNegativeInteger" use="optional" default="1000"/>
	</xs:complexType>
	<xs:complexType name="AccommodationsResponse">
		<xs:annotation>
			<xs:documentation>Shows resorts in a hierarchical tree structure</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationsRequest" type="AccommodationsRequest"/>
			<xs:element name="Accommodations" type="AccommodationSegmentList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AttractionRequest">
		<xs:annotation>
			<xs:documentation>A request for information about attractions for the given supplier code.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="optional"/>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="60"/>
	</xs:complexType>
	<xs:complexType name="AttractionInfoRequest">
		<xs:annotation>
			<xs:documentation>A request for information about attractions for the given supplier code.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Code" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="optional"/>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="60"/>
	</xs:complexType>
	<xs:complexType name="AttractionResponse">
		<xs:annotation>
			<xs:documentation>Shows attractions as a list</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Attractions" type="AttractionList"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Resort">
		<xs:attribute name="ResortId" type="xs:string" use="required"/>
		<xs:attribute name="ResortName" type="xs:string" use="required"/>
		<xs:attribute name="CountryCode" type="ISO3166" use="optional"/>
		<xs:attribute name="ParentResortId" type="xs:string" use="optional"/>
		<xs:attribute name="ResortType" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ResortList">
		<xs:annotation>
			<xs:documentation>A list of resorts</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Resort" type="Resort" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AdditionalAgentInfoRequest">
		<xs:annotation>
			<xs:documentation>A request for information about the current syndicators details</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="AdditionalAgentInfoResponse">
		<xs:annotation>
			<xs:documentation>Response containing information about the current syndicator</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AdditionalAgentInfo" type="AdditionalAgentInfoType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReviewInfoRequest">
		<xs:annotation>
			<xs:documentation>A request for component review information from review providers</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SearchCriteria" type="ReviewSearchDetails"/>
		</xs:sequence>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="60"/>
	</xs:complexType>
	<xs:complexType name="ReviewSearchDetails">
		<xs:annotation>
			<xs:documentation>Defines a set of search criteria for finding reviews within the FAB system.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SpecificReviewList" type="SpecificReviewList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="NumberOfReviews" type="xs:integer" use="optional" default="0"/>
	</xs:complexType>
	<xs:complexType name="SpecificReviewList">
		<xs:annotation>
			<xs:documentation>A list of ReviewComponents for which review information is required</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ReviewComponent" type="ReviewComponent" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReviewComponent">
		<xs:annotation>
			<xs:documentation>For a provider of a specific type, a ReviewComponent denotes a specific item that review information will be related to</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Provider" type="ReviewProvider" use="required"/>
		<xs:attribute name="Type" type="ReviewType" use="required"/>
		<xs:attribute name="ComponentID" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:simpleType name="ReviewProvider">
		<xs:restriction base="xs:string">
			<xs:enumeration value="TRIPADVISOR"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ReviewType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ACCOMMODATION"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ReviewInfoResponse">
		<xs:annotation>
			<xs:documentation>Response containing information related to reviews of components from one or more review provider</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ReviewComponentList" type="ReviewComponentList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReviewComponentList">
		<xs:annotation>
			<xs:documentation>A list of ReviewComponents for which review information is provided</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ReviewComponent" type="ReviewComponentResponse" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReviewComponentResponse">
		<xs:annotation>
			<xs:documentation>Review component returned with review information for that component from the review component provider</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ReviewComponent">
				<xs:sequence>
					<xs:element name="ReviewSummary" type="ReviewSummary"/>
					<xs:element name="RatingBreakdown" type="RatingBreakdown" minOccurs="0"/>
					<xs:element name="Ratings" type="RatingList" minOccurs="0"/>
					<xs:element name="Rankings" type="RankingList" minOccurs="0"/>
					<xs:element name="Reviews" type="ReviewList" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ReviewSummary">
		<xs:annotation>
			<xs:documentation>Summary of ratings and rankings of review component</xs:documentation>
		</xs:annotation>
		<xs:attribute name="OverallRank" type="xs:positiveInteger" use="optional"/>
		<xs:attribute name="OverallRankOutOf" type="xs:positiveInteger" use="optional"/>
		<xs:attribute name="OverallRating" type="PositiveFloat" use="required"/>
		<xs:attribute name="PercentageRecommended" type="Percentage" use="optional"/>
		<xs:attribute name="TotalReviewCount" type="xs:positiveInteger" use="required"/>
	</xs:complexType>
	<xs:complexType name="RatingBreakdown">
		<xs:annotation>
			<xs:documentation>Additional breakdown information for ratings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BreakDown" type="BreakDown" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="TotalReviewCount" type="xs:positiveInteger" use="required"/>
		<xs:attribute name="OverallRating" type="PositiveFloat" use="required"/>
	</xs:complexType>
	<xs:complexType name="BreakDown">
		<xs:annotation>
			<xs:documentation>rating breakdown information</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Rating" type="RatingBreakDownType" use="required"/>
		<xs:attribute name="NumReviews" type="xs:positiveInteger" use="optional"/>
		<xs:attribute name="Percentage" type="PositiveFloat" use="required"/>
	</xs:complexType>
	<xs:simpleType name="RatingBreakDownType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="0.0"/>
			<xs:enumeration value="0.5"/>
			<xs:enumeration value="1.0"/>
			<xs:enumeration value="1.5"/>
			<xs:enumeration value="2.0"/>
			<xs:enumeration value="2.5"/>
			<xs:enumeration value="3.0"/>
			<xs:enumeration value="3.5"/>
			<xs:enumeration value="4.0"/>
			<xs:enumeration value="4.5"/>
			<xs:enumeration value="5.0"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="RankingList">
		<xs:annotation>
			<xs:documentation>A list of Rankings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Rank" type="Rank" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Rank">
		<xs:annotation>
			<xs:documentation>Additional ranks returned by provider</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="RankType" use="required"/>
		<xs:attribute name="Rank" type="xs:positiveInteger" use="required"/>
		<xs:attribute name="OutOf" type="xs:positiveInteger" use="required"/>
	</xs:complexType>
	<xs:simpleType name="RankType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Overall"/>
			<xs:enumeration value="Hotels"/>
			<xs:enumeration value="Inns"/>
			<xs:enumeration value="Lodgings"/>
			<xs:enumeration value="Rentals"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="RatingList">
		<xs:annotation>
			<xs:documentation>A list of Ratings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Rating" type="Rating" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Rating">
		<xs:annotation>
			<xs:documentation>Additional ratings returned by provider</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="RatingType" use="required"/>
		<xs:attribute name="NumReviews" type="xs:positiveInteger" use="optional"/>
		<xs:attribute name="Rating" type="RatingBreakDownType" use="required"/>
	</xs:complexType>
	<xs:simpleType name="RatingType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Location"/>
			<xs:enumeration value="Rooms"/>
			<xs:enumeration value="Service"/>
			<xs:enumeration value="Value"/>
			<xs:enumeration value="Cleanliness"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ReviewList">
		<xs:annotation>
			<xs:documentation>A list of Reviews for the review component</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Review" type="Review" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Review">
		<xs:annotation>
			<xs:documentation>A single review</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Reviewee" type="Reviewee" minOccurs="0"/>
			<xs:element name="ReviewInfoList" type="ReviewInfoList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="PublishDate" type="FABDateTime" use="optional"/>
		<xs:attribute name="VisitDate" type="FABDate" use="optional"/>
		<xs:attribute name="Rating" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="WouldRecommend" type="xs:boolean" use="optional"/>
		<xs:attribute name="TravellerType" type="NonEmptyString" use="optional"/>
		<xs:attribute name="Title" type="NonEmptyString" use="optional"/>
		<xs:attribute name="Content" type="NonEmptyString" use="required"/>
	</xs:complexType>
	<xs:complexType name="Reviewee">
		<xs:annotation>
			<xs:documentation>Person whom reviewed the review component</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="NonEmptyString" use="required"/>
		<xs:attribute name="Id" type="NonEmptyString" use="optional"/>
		<xs:attribute name="Location" type="NonEmptyString" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ReviewInfoList">
		<xs:annotation>
			<xs:documentation>Additional review information list provided by provider for review</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ReviewInfo" type="ReviewInfo" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReviewInfo">
		<xs:annotation>
			<xs:documentation>Additional review information provided for review</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="NonEmptyString" use="required"/>
		<xs:attribute name="Value" type="NonEmptyString" use="required"/>
	</xs:complexType>
	<xs:complexType name="AccommodationReviewComponentResponse">
		<xs:annotation>
			<xs:documentation>Review summary component for accommodation review component</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ReviewSummary" type="ReviewSummary"/>
		</xs:sequence>
		<xs:attribute name="Provider" type="ReviewProvider" use="required"/>
		<xs:attribute name="ComponentID" type="NonEmptyString" use="required"/>
	</xs:complexType>
	<xs:complexType name="BrochureInfo">
		<xs:annotation>
			<xs:documentation>Information from the Tour Operators Brochure about a specific accommodation.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BrochureInfoItem" type="BrochureInfoItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="BrochureName" type="xs:string" use="required"/>
		<xs:attribute name="SeasonStartDate" type="FABDate" use="optional"/>
		<xs:attribute name="SeasonEndDate" type="FABDate" use="optional"/>
	</xs:complexType>
	<xs:complexType name="BrochureInfoItem">
		<xs:annotation>
			<xs:documentation>A flexible structure for holiding items of interest about a particular accommodation. This information generally comes from the tour operators brochures. This will contain things like: "Price Includes", "Special Offers", "Accommodation", "For The Kids"</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Header" type="xs:string" use="optional"/>
		<xs:attribute name="Content" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ImageItem">
		<xs:annotation>
			<xs:documentation>An Image Item contains a URL to the source of an image and also information about the image including its dimensions and associated caption text.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="URL" type="xs:string" use="required"/>
		<xs:attribute name="ThumbnailURL" type="xs:string" use="optional"/>
		<xs:attribute name="CaptionText" type="xs:string" use="optional"/>
		<xs:attribute name="Width" type="xs:integer" use="optional"/>
		<xs:attribute name="Height" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="DirectLinkItem">
		<xs:annotation>
			<xs:documentation>A DirectLink Item contains a direct link URL and also a string representing the remote system set.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DirectLinkURL" type="xs:string" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="System" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CreateBasketRequest">
		<xs:annotation>
			<xs:documentation>In order to start the booking process a CreateBasketRequest is required. It must contain the Itinerary that will eventually be booked. A CreateBasketRequest will return with a reponse only once the TargetBookingStage has been reached except for 2 reasons: 1) more information is required to reach the target stage, or 2) the ResponseTimeoutSecs is reached (0 will return immediately).</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Itinerary" type="Itinerary">
				<xs:annotation>
					<xs:documentation>This sets the itinerary to be booked, it can be amended after it has been added to the basket, but only in certain ways. i.e. You can add cars to the Itinerary but you can't change the departure date. In Order to change the departure date you would have to send set ReplaceExistingBasket in your BasketRequest to true and this would re-start the booking process.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AdditionalCost" type="HolidayCostComponent" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>You can add in additional cost components that wiill be included in the itinerary.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="PartyInfo" type="PartyInfo">
				<xs:annotation>
					<xs:documentation>Info about the party that is required to produce a quick-cost for each itinerary in the shortlist. The first FABShortListRequest in a session MUST include this party information, otherwise an error will be returned. Each subsequent ShortList request can omit this information unless a change is required.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="PassengerDetails" type="CustomerList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Full customer details are required before the basket can reach either the optional_extras stage OR the confirmed_costing stage</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Remarks" type="RemarkList" minOccurs="0"/>
			<xs:element name="Voucher" type="Voucher" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>You can add in voucher code details that will be applied if possible (currently at the booking stage only)</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>A CreateBasketRequest will return with a reponse only once the TargetBookingStage has been reached except for 2 reasons. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="HandoffPreference" type="ExternalHandoffPreference" use="optional" default="SyndicatorDefault"/>
		<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="optional" default="confirmed_costing"/>
		<xs:attribute name="ReplaceExistingBasket" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If the current session already contains an existing basket then a CreateBasketRequest will result in an erronous response UNLESS this field is set to true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ConsumersReference" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AmendBasketRequest">
		<xs:annotation>
			<xs:documentation>You can amend a basket by sending an AmendBasketRequest. This can add more information to the basket and allow it to proceed to a more advanced costing stage, it can also add items (such as cars and optional extras) to the Itinerary within the basket.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendVehicles" type="VehicleList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Add cars to the itinerary in this basket. This will REPLACE the list of cars contained within the itinerary.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AmendOptionalExtras" type="OptionalExtrasList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>This will REPLACE the list of optional extras contained within the itinerary</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="PassengerDetails" type="CustomerList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Full customer details are required before a confirmed costing can be generated for the itinerary</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AdditionalCost" type="HolidayCostComponent" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>You can add in additional cost components that wiill be included in the itinerary.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Remarks" type="RemarkList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="required"/>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows consumers of the service to poll the basket for updated information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="optional" default="confirmed_costing"/>
		<xs:attribute name="ConsumersReference" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AbstractBookBasketRequest">
		<xs:annotation>
			<xs:documentation>You can only book a basket that is currently at the "confimed_costing" stage. You must include payment information in order to book the Basket and also two bits of information from the itinerary's Cost object (as a double check procedure). This is an abstract type and can not be used directly.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Payment" type="PaymentInfo"/>
			<xs:element name="Component" type="BasketComponent" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Handoff" type="Handoff" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="LoyaltyInfo" type="LoyaltyInfo" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ConsumersBasketContext" type="ConsumersBasketContext" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TotalCost" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>This must match the TotalCost of the itinerary within the Basket</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ParallelBooking" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="ConsumersReference" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="BookBasketRequest">
		<xs:annotation>
			<xs:documentation>You can only book a basket that is currently at the "confimed_costing" stage. You must include payment information in order to book the Basket and also two bits of information from the itinerary's Cost object (as a double check procedure).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AbstractBookBasketRequest">
				<xs:attribute name="BasketId" type="BasketIdType" use="required"/>
				<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="290"/>
				<xs:attribute name="HandoffPreference" type="ExternalHandoffPreference" use="optional" default="SyndicatorDefault"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CreateAndBookBasketRequest">
		<xs:annotation>
			<xs:documentation>You can only book a basket that is currently at the "confimed_costing" stage. You must include payment information in order to book the Basket and also two bits of information from the itinerary's Cost object (as a double check procedure). All Itinierary information is also required to make a booking - this is the information that would be used in a CreateBasketRequest.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="AbstractBookBasketRequest">
				<xs:sequence>
					<xs:element name="Itinerary" type="Itinerary">
						<xs:annotation>
							<xs:documentation>This sets the itinerary to be booked, it can be amended after it has been added to the basket, but only in certain ways. i.e. You can add cars to the Itinerary but you can't change the departure date. In Order to change the departure date you would have to send set ReplaceExistingBasket in your BasketRequest to true and this would re-start the booking process.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="AdditionalCost" type="HolidayCostComponent" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>You can add in additional cost components that wiill be included in the itinerary.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PartyInfo" type="PartyInfo">
						<xs:annotation>
							<xs:documentation>Info about the party that is required to produce a quick-cost for each itinerary in the shortlist. The first FABShortListRequest in a session MUST include this party information, otherwise an error will be returned. Each subsequent ShortList request can omit this information unless a change is required.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PassengerDetails" type="CustomerList">
						<xs:annotation>
							<xs:documentation>Full customer details are required before the basket can reach either the optional_extras stage OR the confirmed_costing stage</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="ReplaceExistingBasket" type="xs:boolean" use="optional" default="false">
					<xs:annotation>
						<xs:documentation>If the current session already contains an existing basket then a CreateBasketRequest will result in an erronous response UNLESS this field is set to true.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CheckBasketRequest">
		<xs:annotation>
			<xs:documentation>This can be used to check on the progress of an already constructed basket. This will simply result in the Current Basket being returned.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetBasketDefinition" type="TargetBasketDefinition" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The target Basket to return can be defined with respect certain specified components contained within the Basket.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Flight" type="SimplePackageFlightDetails" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="optional"/>
		<xs:attribute name="LeadPassengerName" type="xs:string" use="optional"/>
		<xs:attribute name="LeadPassengerSurname" type="xs:string" use="optional"/>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="5"/>
	</xs:complexType>
	<xs:complexType name="UpdateBookedBasketRequest">
		<xs:annotation>
			<xs:documentation>It may be possible to update a basket AFTER it has been booked. For now, this is limited to updating passenger details to add FOID elements after booking.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PassengerDetails" type="CustomerList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Full customer details are required before a confirmed costing can be generated for the itinerary</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="required"/>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows consumers of the service to poll the basket for updated information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ConsumersReference" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:element name="Basket" type="Basket"/>
	<xs:complexType name="Basket">
		<xs:annotation>
			<xs:documentation>The FAB Basket can contain only one itinerary. It is created by sending a CreateBasketRequest, this starts the booking procedure. It can be amended (to add cars and optional extras, as well as give customer details) by sending an AmendBasketRequest. If an item has been added to the itinerary, it can invalidate the current costing, in which case the costing will remain invalid until reaching the next costing stage. A Basket whose Itinerary Costing has been confirmed and is currently valid, can be booked by sending a BasketBookRequest that contains the required payment information, this will result in a BookingInfo object being added to the basket.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ItineraryContainer">
				<xs:sequence>
					<xs:element name="PartyInfo" type="PartyInfo"/>
					<xs:element name="PassengerDetails" type="CustomerList" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Full customer details are required before a confirmed costing can be generated for the itinerary</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Component" type="BasketComponent" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="BookingInfo" type="BookingInfo" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Only appears once the basket has been booked</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Warnings" type="FABWarningList" minOccurs="0"/>
					<xs:element name="Errors" type="FABErrorList" minOccurs="0"/>
					<xs:element name="ThreeDSecureResponse" type="ThreeDSecureResponse" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This will be populated only if a 3-D Secure payment auth is initiated at the point of booking.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Remarks" type="RemarkList" minOccurs="0"/>
					<xs:element name="Handoff" type="Handoff" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ConsumersBasketContext" type="ConsumersBasketContext" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="BasketId" type="BasketIdType" use="required"/>
				<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="required"/>
				<xs:attribute name="CurrentBookingStage" type="FABBookingStage" use="required"/>
				<xs:attribute name="ConsumersReference" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ConsumersBasketContext">
		<xs:annotation>
			<xs:documentation>A list of parameters containing contextual data used by the consumer.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Parameter" type="NameValuePair" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BookingInfo">
		<xs:annotation>
			<xs:documentation>Information about a Booked Basket</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BookingComponent" type="BookingComponent" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PaymentAuth" type="PaymentAuth" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="LodgedCardPaymentAuth" type="PaymentAuth" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AdditionalAgentInfo" type="AdditionalAgentInfoType" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Success" type="FABSuccess" use="required">
			<xs:annotation>
				<xs:documentation>true if the booking succeeded, false if FAB failed to book the basket for some reason.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PaymentMode" type="FABPaymentMode" use="required"/>
		<xs:attribute name="PaidOnlyDeposit" type="xs:boolean" use="required"/>
		<xs:attribute name="PaymentTakenAtBooking" type="xs:float" use="required"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="PaymentTakenByFABAtBooking" type="xs:float" use="optional"/>
		<xs:attribute name="ThirdPartyHandoffBookingId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="BookingComponent">
		<xs:annotation>
			<xs:documentation>Each supplier in the itinerary will return a seperate booking reference, these are stored within a BookingComponent</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ETicket" type="ETicket" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="Success" type="FABSuccess" use="required"/>
		<xs:attribute name="BookingReference" type="xs:string" use="optional"/>
		<xs:attribute name="Deposit" type="xs:float" use="optional"/>
		<xs:attribute name="TotalCost" type="xs:float" use="optional"/>
		<xs:attribute name="ExpectedTotalCost" type="xs:float" use="optional"/>
		<xs:attribute name="BookingChannel" type="FABBookingChannel" use="optional"/>
		<xs:attribute name="BookingChannelName" type="xs:string" use="optional"/>
		<xs:attribute name="BookingUsername" type="xs:string" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="BookingDate" type="FABDateTime" use="optional"/>
		<xs:attribute name="InvoicingEntity" type="xs:string" use="optional"/>
		<xs:attribute name="VoucherCode" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ETicket">
		<xs:annotation>
			<xs:documentation>Represents an Electronic Ticket issued by a Supplier.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Flight" type="ETicketFlight" maxOccurs="unbounded"/>
			<xs:element name="Cost" type="ETicketCost"/>
		</xs:sequence>
		<xs:attribute name="ETicketNumber" type="xs:string" use="optional"/>
		<xs:attribute name="PassengerName" type="xs:string" use="required"/>
		<xs:attribute name="DateOfIssue" type="FABDate" use="required"/>
		<xs:attribute name="FormOfPayment" type="xs:string" use="optional"/>
		<xs:attribute name="IssuingAgency" type="xs:string" use="optional"/>
		<xs:attribute name="PlaceOfIssue1" type="xs:string" use="optional"/>
		<xs:attribute name="PlaceOfIssue2" type="xs:string" use="optional"/>
		<xs:attribute name="IssuingAgent" type="xs:string" use="optional"/>
		<xs:attribute name="Endorsements" type="xs:string" use="optional"/>
		<xs:attribute name="LegalNotices" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ETicketFlight">
		<xs:annotation>
			<xs:documentation>A Flight Component of an ETicket</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Airline" type="SupplierCode" use="required"/>
		<xs:attribute name="FlightNumber" type="xs:string" use="required"/>
		<xs:attribute name="DepartureDate" type="FABDate" use="required"/>
		<xs:attribute name="DepartureTime" type="FABTime" use="required"/>
		<xs:attribute name="Origin" type="TravelPointCode" use="required"/>
		<xs:attribute name="OriginName" type="xs:string" use="optional"/>
		<xs:attribute name="OriginTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="Destination" type="TravelPointCode" use="required"/>
		<xs:attribute name="DestinationName" type="xs:string" use="optional"/>
		<xs:attribute name="DestinationTerminal" type="xs:string" use="optional"/>
		<xs:attribute name="FlightClass" type="xs:string" use="optional"/>
		<xs:attribute name="BaggageAllowance" type="xs:string" use="optional"/>
		<xs:attribute name="FareBasis" type="xs:string" use="optional"/>
		<xs:attribute name="ReservationStatus" type="xs:string" use="optional"/>
		<xs:attribute name="NotValidBeforeAfter" type="xs:string" use="optional"/>
		<xs:attribute name="NumericAirlineCode" type="xs:string" use="optional"/>
		<xs:attribute name="OperatedBy" type="xs:string" use="optional"/>
		<xs:attribute name="Ref" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ETicketCost">
		<xs:annotation>
			<xs:documentation>A Cost Component of an ETicket</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TaxComponent" type="ETicketTaxComponent" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="FareCalculation" type="xs:string" use="optional"/>
		<xs:attribute name="BaseFare" type="xs:float" use="required"/>
		<xs:attribute name="Total" type="xs:float" use="required"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="required"/>
	</xs:complexType>
	<xs:complexType name="ETicketTaxComponent">
		<xs:annotation>
			<xs:documentation>A Tax Component of an ETicket</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Amount" type="xs:float" use="required"/>
		<xs:attribute name="Code" type="xs:string" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="required"/>
	</xs:complexType>
	<xs:complexType name="BasketComponent">
		<xs:annotation>
			<xs:documentation>Each supplier in the itinerary has an associated BasketComponent</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="CurrentBookingStage" type="FABBookingStage" use="required"/>
	</xs:complexType>
	<xs:complexType name="PaymentInfo">
		<xs:annotation>
			<xs:documentation>Info about how the Basket Itinerary will be paid for. You can pay with more than one payment card.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PaymentCard" type="PaymentCard" minOccurs="0"/>
			<xs:element name="ThreeDSecureInit" type="ThreeDSecureInit" minOccurs="0"/>
			<xs:element name="ThreeDSecureAuth" type="ThreeDSecureAuth" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="PaymentMode" type="FABPaymentMode" use="required"/>
		<xs:attribute name="PayOnlyDeposit" type="xs:boolean" use="required"/>
		<xs:attribute name="ThreeDSecurePaymentMandatory" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="PaymentAuth">
		<xs:annotation>
			<xs:documentation>
				Info about an authorised payment made by FAB
			</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="AuthParameters"/>
		<xs:attribute name="AuthSystemUsed" type="xs:string" use="optional"/>
		<xs:attribute name="Amount" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional"/>
		<xs:attribute name="Last4DigitsOfCardNumberUsed" type="xs:string" use="optional"/>
		<xs:attribute name="CardNameUsed" type="xs:string" use="optional"/>
		<xs:attribute name="SupplierCode" type="xs:string" use="optional"/>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="CardSchemeUsed" type="FABPaymentCardType" use="optional"/>
		<xs:attribute name="First6DigitsOfCardNumberUsed" type="xs:string" use="optional"/>
		<xs:attribute name="virtualCardReference" type="xs:string" use="optional"/>
		<xs:attribute name="CardOrigin" type="FABPaymentCardOrigin" use="optional"/>
		<xs:attribute name="CardSource" type="xs:string" use="optional"/>
		<xs:attribute name="CardType" type="FABPaymentCardType" use="optional"/>
		<xs:attribute name="PaymentProviderMethod" type="xs:string" use="optional"/>
		<xs:attribute name="PaymentProviderBrand" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AdditionalAgentInfoType">
		<xs:sequence>
			<xs:element name="AgencyAddress" type="Address"/>
		</xs:sequence>
		<xs:attribute name="ABTANumber" type="xs:string" use="optional"/>
		<xs:attribute name="AgencyName" type="xs:string" use="optional"/>
		<xs:attribute name="Telephone" type="xs:string" use="optional"/>
		<xs:attribute name="Email" type="xs:string" use="optional"/>
		<xs:attribute name="CanIncreaseMarkup" type="xs:boolean" use="optional"/>
		<xs:attribute name="CanDecreaseMarkup" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="PaymentCard">
		<xs:annotation>
			<xs:documentation>
				Describes a Credit or Debit Card used for payment.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CardHoldersAddress" type="Address" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						This is required if the mode of payment is
						card_payment_a
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="CardNumber" type="xs:string" use="required"/>
		<xs:attribute name="ExpiryDate" type="MMYYDate" use="required"/>
		<xs:attribute name="Authorisation" type="FABCardPaymentAuthorisationMode" use="required"/>
		<xs:attribute name="CardType" type="FABPaymentCardType" use="optional"/>
		<xs:attribute name="CardHoldersName" type="xs:string" use="optional"/>
		<xs:attribute name="IssueDate" type="MMYYDate" use="optional"/>
		<xs:attribute name="IssueNumber" type="xs:string" use="optional"/>
		<xs:attribute name="Cv2SecurityNumber" type="CV2SecurityNumberType" use="optional"/>
		<xs:attribute name="CardHoldersEmailAddress" type="xs:string" use="optional"/>
		<xs:attribute name="CardHoldersTelephoneNumber" type="xs:string" use="optional"/>
		<xs:attribute name="CardHoldersEveningPhoneNumber" type="xs:string" use="optional"/>
		<xs:attribute name="CardHoldersDateOfBirth" type="FABDate" use="optional"/>
		<xs:attribute name="CardComment" type="xs:string" use="optional"/>
		<xs:attribute name="TDSPassword" use="optional">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:pattern value="\s*\S(.|\n|\r)*"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="PaymentCardList">
		<xs:annotation>
			<xs:documentation>A list of Payment Cards. For Internal use only.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PaymentCard" type="PaymentCard" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Address">
		<xs:annotation>
			<xs:documentation>Describes An Address</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Address1" type="xs:string" use="optional"/>
		<xs:attribute name="Address2" type="xs:string" use="optional"/>
		<xs:attribute name="Address3" type="xs:string" use="optional"/>
		<xs:attribute name="Address4" type="xs:string" use="optional"/>
		<xs:attribute name="CityOrTown" type="xs:string" use="optional"/>
		<xs:attribute name="PostCode" type="xs:string" use="optional"/>
		<xs:attribute name="Country" type="ISO3166" use="optional"/>
	</xs:complexType>
	<xs:complexType name="PaymentRequest">
		<xs:annotation>
			<xs:documentation>Wraps a payment card in a structure that tells us how to authorise the debit or credit. If doing an auth, pre or refund, an amount, currency, MerchantReference and PaymentCard are required. If doing a fulfill or txn_refund then an AuthCode and AuthReference are required.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PaymentCard" type="PaymentCard" minOccurs="0"/>
			<xs:element name="ThreeDSecureInit" type="ThreeDSecureInit" minOccurs="0"/>
			<xs:element name="ThreeDSecureAuth" type="ThreeDSecureAuth" minOccurs="0"/>
			<xs:element name="Customer" type="Customer" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Method" type="FABPaymentAuthorisationMethod" use="required"/>
		<xs:attribute name="Amount" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional"/>
		<xs:attribute name="HandoffPreference" type="ExternalHandoffPreference" use="optional" default="SyndicatorDefault"/>
		<xs:attributeGroup ref="AuthParameters"/>
	</xs:complexType>
	<xs:complexType name="ThreeDSecureInit">
		<xs:annotation>
			<xs:documentation>If included, FAB will attempt to initiate the 3D Secure payment authorisation scheme</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="MerchantUrl" type="xs:string">
				<xs:annotation>
					<xs:documentation>This element contains the URL to the merchant site used for this transaction.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="PurchaseDescription" type="xs:string">
				<xs:annotation>
					<xs:documentation>A short description of what has been purchased. This is shown to the card holder by the ACS.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Browser" type="Browser"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ThreeDSecureAuth">
		<xs:annotation>
			<xs:documentation>This is required only if completing the 3-D Secure Auth Process</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PaymentAuthResponseMessage" type="xsd:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Payer Authentication Response. Only applicable when the method is threedsecure_authorization_request, and payer authentication has taken place. Contains the message returned by the ACS, providing the results of the Issuer's 3-D Secure cardholder authentication. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Browser">
		<xs:sequence>
			<xs:element name="DeviceCategory">
				<xs:annotation>
					<xs:documentation>An indication of the device used for this transaction, either 0 for a PC or 1 for a mobile device.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="0"/>
						<xs:enumeration value="1"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="AcceptHeaders" type="xsd:string">
				<xs:annotation>
					<xs:documentation>The MIME types of the headers accepted by this device</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="UserAgent" type="xsd:string">
				<xs:annotation>
					<xs:documentation>The User Agent associated with this device</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ThreeDSecureResponse">
		<xs:sequence>
			<xs:element name="SchemeStatus" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Details whether the card is part of a scheme that is supported by the 3-D Secure system, and to which the merchant is subscribed.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xsd:string">
						<xs:enumeration value="enabled"/>
						<xs:enumeration value="not enabled"/>
						<xs:enumeration value="not supported"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Processed" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Details whether the transaction was processed as a 3-D Secure transaction.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xsd:string">
						<xs:enumeration value="no"/>
						<xs:enumeration value="yes"/>
						<xs:enumeration value="fail"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Enrolled" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Enrolment status of the card.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xsd:string">
						<xs:enumeration value="no"/>
						<xs:enumeration value="yes"/>
						<xs:enumeration value="fail"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Verified" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Details whether the identity of the cardholder was authenticated by their card issuer.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xsd:string">
						<xs:enumeration value="no"/>
						<xs:enumeration value="yes"/>
						<xs:enumeration value="fail"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="PaymentAuthRequestMessage" type="xsd:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Payer Authentication Request. Only applicable as response to ThreeDSecure Enrolment Check Request where the cardholder is enrolled.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AccessControlServerUrl" type="xsd:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>URL of the Issuers Access Control Server to which the cardholder is redirected. Sent with pareq_message.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PaymentResponse">
		<xs:annotation>
			<xs:documentation>Response to a PaymentRequest</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FailureReason" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ThreeDSecureResponse" type="ThreeDSecureResponse" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Success" type="xs:boolean" use="required"/>
		<xs:attributeGroup ref="AuthParameters"/>
		<xs:attribute name="AuthSystemUsed" type="xs:string" use="optional"/>
		<xs:attribute name="CardSchemeUsed" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:attributeGroup name="FABRequestParameters">
		<xs:annotation>
			<xs:documentation>A Group of attributes that all FAB requests have,
			but this new FAB2LegacyFAB attribute is for private use only in FAB1/FAB2 and
			should not be documented into FAB public API to be exposed to any customer</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Target" type="FABRequestTargetType" use="required"/>
		<xs:attribute name="Version" type="xs:string" use="required"/>
		<xs:attribute name="FAB2LegacyFAB" type="xs:boolean" use="optional" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="AuthParameters">
		<xs:annotation>
			<xs:documentation>A Group of attributes that describes an Auth</xs:documentation>
		</xs:annotation>
		<xs:attribute name="AuthReference" type="xs:string" use="optional"/>
		<xs:attribute name="AuthCode" type="xs:string" use="optional"/>
		<xs:attribute name="MerchantReference" type="xs:string" use="optional"/>
	</xs:attributeGroup>
	<xs:complexType name="ControlRequest">
		<xs:annotation>
			<xs:documentation>This can be used to invoke various sytem functions.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="DeleteSession" type="xs:boolean" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ControlResponse">
		<xs:annotation>
			<xs:documentation>This can be used to invoke various sytem functions.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="DeletedSession" type="xs:boolean" use="optional"/>
		<xs:attribute name="Success" type="xs:boolean" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABRequestResponse">
		<xs:annotation>
			<xs:documentation>Base Object for both requests AND responses</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SyndicatorInfo" type="SyndicatorInfo"/>
			<xs:element name="UserInfo" type="UserInfo" minOccurs="0"/>
			<xs:element name="Credentials" type="CredentialsList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Whilst this exists to potentially allow you to "override" the credential used with the supplier, this is Not Supported functionality</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SessionInfo" type="FABSessionInfo"/>
			<xs:element name="Languages" type="LanguageList" minOccurs="0"/>
			<xs:element name="CacheControls" type="CacheControls" minOccurs="0"/>
			<xs:element name="ConsumersContext" type="ConsumersContextInfo" minOccurs="0">
				<xs:annotation>
					<xs:documentation>This is included in all Requests to FAB and is reflected back in each Response. This allows consumers of the service to attach context to a request/reponse pair. Please note that this facility should not be abused in order to avoid unnecessary bandwidth overhead.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Warnings" type="FABWarningList" minOccurs="0"/>
			<xs:element name="Errors" type="FABErrorList" minOccurs="0"/>
			<xs:element name="CurrencyConversionRates" type="CurrencyConversionRateList" minOccurs="0"/>
			<xs:element name="ConfigOverride" type="ConfigOverride" minOccurs="0"/>
		</xs:sequence>
		<xs:attributeGroup ref="FABRequestParameters"/>
	</xs:complexType>
	<xs:complexType name="CacheControls">
		<xs:sequence>
			<xs:element name="CacheControl" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:attribute name="Name" type="xs:string" use="required"/>
					<xs:attribute name="Value" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Accuracy" type="xs:float" use="optional"/>
		<xs:attribute name="Completeness" type="xs:float" use="optional"/>
		<xs:attribute name="Freshness" type="xs:float" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CurrencyConversionRateList">
		<xs:annotation>
			<xs:documentation>A List of Currency Conversion Rates</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Rate" type="CurrencyConversionRate" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CurrencyConversionRate">
		<xs:annotation>
			<xs:documentation>Currency Conversion Rates</xs:documentation>
		</xs:annotation>
		<xs:attribute name="FromCurrency" type="CurrencyCode" use="required"/>
		<xs:attribute name="ToCurrency" type="CurrencyCode" use="required"/>
		<xs:attribute name="Rate" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABRegistryDescriptor">
		<xs:annotation>
			<xs:documentation>Configures all Code modules in FAB. Each Module is registered by it's interfaces (unless ignored) and associated suppliers</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AdminEmail" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="AppendServerIdTag" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Append server identification tags to session IDs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="OverrideServerIdTag" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Forces the server identification tag to a particular value, instead of taking it from the host name</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="IgnoreInterface" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="RequestResponseHandler" type="FABRequestResponseHandlerDescriptor" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Module" type="FABModuleDescriptor" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FABModuleDescriptor">
		<xs:annotation>
			<xs:documentation>Describes a FAB Module</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DefaultInterface" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DisabledInterface" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SupplierCode" type="SupplierCode" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Syndicator" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ModuleKey" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Property" type="Property" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="MapProperty" type="MapProperty" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ListProperty" type="ListProperty" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SetProperty" type="SetProperty" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ClassName" type="xs:string" use="required"/>
		<xs:attribute name="Key" type="xs:string" use="optional"/>
		<xs:attribute name="Disabled" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="FABRequestResponseHandlerDescriptor">
		<xs:annotation>
			<xs:documentation>Describes a FAB Request Response Handler</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABModuleDescriptor">
				<xs:attribute name="RequestClass" type="xs:string" use="required"/>
				<xs:attribute name="ResponseClass" type="xs:string" use="required"/>
				<xs:attribute name="UTF16Response" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FABAttribute">
		<xs:annotation>
			<xs:documentation>Generic Attribute could relate to Accommodation or Room or Resort etc. Optionally contains a string value.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ID" type="xs:integer" use="required"/>
		<xs:attribute name="Description" type="xs:string" use="required"/>
		<xs:attribute name="Type" type="FABAttributeType" use="required"/>
		<xs:attribute name="Value" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="FABAttributeList">
		<xs:annotation>
			<xs:documentation>A list of FABAttributes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Attribute" type="FABAttribute" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Property">
		<xs:annotation>
			<xs:documentation>Simple name value pair</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Value" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="MapProperty">
		<xs:annotation>
			<xs:documentation>Allows for properties that are Maps of Property entries, where Name = key and value = value</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Entry" type="Property" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Type" type="xs:string" use="optional" default="java.util.HashMap"/>
	</xs:complexType>
	<xs:complexType name="ListProperty">
		<xs:annotation>
			<xs:documentation>Allows for properties that are Lists of strings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Value" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Type" type="xs:string" use="optional" default="java.util.ArrayList"/>
	</xs:complexType>
	<xs:complexType name="SetProperty">
		<xs:annotation>
			<xs:documentation>Allows for properties that are Sets of strings</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Value" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Type" type="xs:string" use="optional" default="java.util.HashSet"/>
	</xs:complexType>
	<xs:complexType name="FABSyndicatorConfig">
		<xs:annotation>
			<xs:documentation>Holds syndicator config for FAB</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BookableSuppliers" type="SupplierList" minOccurs="0"/>
			<xs:element name="ContactDetails" type="ContactDetails"/>
			<xs:element name="Database" type="DatabaseConfig"/>
			<xs:element name="Payment" type="PaymentConfig"/>
			<xs:element name="Pricing" type="PricingConfig"/>
			<xs:element name="ExtrasPolicy" type="SyndicatorExtrasPolicy" minOccurs="0"/>
			<xs:element name="Ticketing" type="TicketingConfig"/>
			<xs:element name="Viewdata" type="ViewdataConfig"/>
			<xs:element name="Generic" type="GenericConfig"/>
			<xs:element name="DisabledHandler" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DisabledSuppliers" type="SupplierList" minOccurs="0"/>
			<xs:element name="SecurityConfig" type="SecurityConfig" minOccurs="0"/>
			<xs:element name="SuppliersTolerances" type="SupplierToleranceList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ProductionMessagesAllowed" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="TransactionBooking" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="ExcludeNonBookableSuppliers" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="SessionTimeoutMins" type="xs:integer" use="optional" default="30"/>
		<xs:attribute name="BookingNotificationEmail" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SupplierToleranceList">
		<xs:annotation>
			<xs:documentation>A list of suppliers tolerances (PK is the supplier code or supplier code and currency)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierTolerance" type="SupplierToleranceConfig" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierToleranceConfig">
		<xs:annotation>
			<xs:documentation>A tolerance configuration for a supplier, or for a supplier and a currency</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DecreaseTolerance" type="Tolerance" minOccurs="0"/>
			<xs:element name="IncreaseTolerance" type="Tolerance" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="Tolerance">
		<xs:annotation>
			<xs:documentation>A tolerance (increase or decrease) configuration</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Currency" type="xs:string" use="optional"/>
		<xs:attribute name="Value" type="PositiveFloat"/>
		<xs:attribute name="Type" type="ToleranceType"/>
	</xs:complexType>
	<xs:simpleType name="ToleranceType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="PERCENTAGE">
				<xs:annotation>
					<xs:documentation>The percentage value will represent the ratio of the decrease or the increase, compared to the
					expected price (ie. A value of 10 for a DecreaseTolerance will mean that the actual price can be between 90 and
					100% of the expected price).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="FIXED_PER_BOOKING"/>
			<xs:enumeration value="FIXED_PER_PASSENGER"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ContactDetails">
		<xs:annotation>
			<xs:documentation>Syndicator Contact details</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Address" type="Address"/>
		</xs:sequence>
		<xs:attribute name="FriendlySyndicatorName" type="xs:string" use="required"/>
		<xs:attribute name="ContactName" type="xs:string" use="optional" default="FAB Customer Services"/>
		<xs:attribute name="EmailAddress" type="xs:string" use="optional" default="support@multicom.co.uk"/>
		<xs:attribute name="Telephone" type="xs:string" use="optional" default="0117 908 1250"/>
		<xs:attribute name="Fax" type="xs:string" use="optional" default="0117 908 1394"/>
	</xs:complexType>
	<xs:complexType name="CustomerContactDetails">
		<xs:annotation>
			<xs:documentation>Customer contact details</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Address" type="Address" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="EmailAddress" type="xs:string" use="optional"/>
		<xs:attribute name="Telephone" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="DatabaseConfig">
		<xs:annotation>
			<xs:documentation>Syndicators database config</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DefaultSuppliers" type="SupplierList" minOccurs="0"/>
			<xs:element name="FavouriteSuppliers" type="SupplierList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="DefaultDatabaseManager" type="xs:string" use="optional" default="fab"/>
		<xs:attribute name="DatabaseSyndicatorId" type="xs:integer" use="optional" default="0"/>
		<xs:attribute name="DefaultInitialModifierCode" type="xs:string" use="optional"/>
		<xs:attribute name="DefaultStrategyReference" type="xs:string" use="optional"/>
		<xs:attribute name="PackageHolidaySearchName" type="xs:string" use="optional" default="FABHolidaySearch"/>
		<xs:attribute name="FlightOnlySearchName" type="xs:string" use="optional" default="FABFlightOnlySearch"/>
		<xs:attribute name="GridSearchName" type="xs:string" use="optional" default="DynamicClassCodeGridSearch"/>
		<xs:attribute name="AccommodationLeechAccess" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="PaymentConfig">
		<xs:annotation>
			<xs:documentation>Syndicators Payment config</xs:documentation>
		</xs:annotation>
		<xs:attribute name="DeferredPaymentsAllowed" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="ProductionPaymentsAllowed" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="CustomPaymentHandler" type="xs:string" use="optional"/>
		<xs:attribute name="PaymentCardFailureEmail" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ConfigOverride">
		<xs:annotation>
			<xs:documentation>Override specific properties of the Syndicator config</xs:documentation>
		</xs:annotation>
		<xs:attribute name="NormalisationCurrency" type="CurrencyCode" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TicketingConfig">
		<xs:annotation>
			<xs:documentation>Holds syndicator config for FAB</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TODBookableSuppliers" type="SupplierList" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="IssuingAgency" type="xs:string" use="optional"/>
		<xs:attribute name="PlaceOfIssue1" type="xs:string" use="optional"/>
		<xs:attribute name="PlaceOfIssue2" type="xs:string" use="optional"/>
		<xs:attribute name="ETicketsAllowed" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="PaperTicketsAllowed" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="CanPaperTicketAtWeekends" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="DaysRequiredToPaperTicket" type="xs:integer" use="optional" default="2"/>
	</xs:complexType>
	<xs:complexType name="PricingConfig">
		<xs:annotation>
			<xs:documentation>Holds syndicator pricing config for FAB</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PricingRules" type="PricingRules" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="NormaliseCurrencies" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="NormalisationCurrency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="ExchangeRateMultiplier" type="xs:float" use="optional" default="1.1"/>
		<xs:attribute name="ExchangeFixedCost" type="xs:float" use="optional" default="0.0"/>
		<xs:attribute name="CustomExchangeHandler" type="xs:string" use="optional"/>
		<xs:attribute name="AddTaxToLeadInPrice" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="AddPriceCodesToCostDetails" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="ShowPricingAudit" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="UpdatePrices" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="ViewdataConfig">
		<xs:annotation>
			<xs:documentation>
				Holds syndicator viewdata config for FAB
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ViedataHandlerName" type="xs:string" use="optional" default="PartyPriceHandler"/>
		<xs:attribute name="AutoAddReplacementItineraries" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="SaveOptions" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="DefaultMealOkay" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="DefaultResortTransferOkay" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="DefaultDonationOkay" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="DefaultBaggageOkay" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="SelectFreeTransfers" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="QuickCostRetries" type="xs:integer" use="optional" default="0"/>
		<xs:attribute name="QuickCostTimeoutSecs" type="xs:integer" use="optional" default="180"/>
		<xs:attribute name="BookingRetries" type="xs:integer" use="optional" default="0"/>
		<xs:attribute name="BookingTimeoutSecs" type="xs:integer" use="optional" default="240"/>
	</xs:complexType>
	<xs:complexType name="GenericConfig">
		<xs:annotation>
			<xs:documentation>Holds generic config values</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Property" type="Property" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="ListProperty" type="ListProperty" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="MapProperty" type="MapProperty" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SetProperty" type="SetProperty" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SecurityConfig">
		<xs:annotation>
			<xs:documentation>List of allowed IP's or IP Ranges in the form </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AllowedIPAddressOrRange" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FeatureSwitches">
		<xs:annotation>
			<xs:documentation>A list of feature switches to enable or disable functionality within FAB</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FeatureSwitch" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Syndicators" minOccurs="0">
							<xs:complexType>
								<xs:sequence>
									<xs:element name="Syndicator" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
								</xs:sequence>
								<xs:attribute name="Enabled" type="xs:boolean" use="optional" default="true"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="Name" type="xs:string" use="optional"/>
					<xs:attribute name="SwitchOffDate" type="xs:string" use="optional"/>
					<xs:attribute name="SwitchOnDate" type="xs:string" use="optional"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FABPricedComponent">
		<xs:annotation>
			<xs:documentation>Super type for all PricedComponents, allows us to null it out of not wanted in the view. Will become the super type of Itinerary, SimplePackageHoliday, AccommodationSegment and any other items that we want to apply pricing rules to.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PricingInfo" type="FABPricingInfo" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FABPricingInfo">
		<xs:annotation>
			<xs:documentation>Contains detailed information on the pricing components for a PricedComponent. Currency indicates the normilsation currency of the associated syndicator and is the currency of all prices and costs unless otherwise indicated.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierPricingInfo" type="FABSupplierPricingInfo" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DisplayPricing" type="FABDisplayPricing" minOccurs="0"/>
			<xs:element name="Audit" type="FABAuditInfo" minOccurs="0"/>
			<xs:element name="POSAudit" type="AgentAuditInfo" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Currency" type="CurrencyCode" use="required"/>
		<xs:attribute name="TotalPrice" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABDisplayPricing">
		<xs:annotation>
			<xs:documentation>Normalised pricing ready for display</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="LineItem" type="FABDisplayPricingItem" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Currency" type="CurrencyCode" use="required"/>
		<xs:attribute name="TotalPrice" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABDisplayPricingItem">
		<xs:annotation>
			<xs:documentation>Normalised pricing line item ready for display to the end customer.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Description" type="xs:string" use="required"/>
		<xs:attribute name="Price" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABAuditInfo">
		<xs:annotation>
			<xs:documentation>Pricing Audit</xs:documentation>
		</xs:annotation>
		<xs:attribute name="StandardCosts" type="xs:float" use="required"/>
		<xs:attribute name="SpecialCosts" type="xs:float" use="optional"/>
		<xs:attribute name="TaxCosts" type="xs:float" use="optional"/>
		<xs:attribute name="StandardMarkups" type="xs:float" use="optional"/>
		<xs:attribute name="SpecialMarkups" type="xs:float" use="optional"/>
		<xs:attribute name="ExtraDiscounts" type="xs:float" use="optional"/>
		<xs:attribute name="Profit" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="AgentAuditInfo">
		<xs:annotation>
			<xs:documentation>Agent Audit Info</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABAuditInfo">
				<xs:attribute name="AgentType" type="FABAgentType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FABSupplierPricingInfo">
		<xs:annotation>
			<xs:documentation>Contains detailed information on the pricing components for a PricedComponent</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Item" type="FABPricedItem" maxOccurs="unbounded"/>
			<xs:element name="SourceAudit" type="FABSourceAudit" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierType" type="FABSupplierType" use="required"/>
		<xs:attribute name="SourceCurrency" type="CurrencyCode" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABPricedItem">
		<xs:annotation>
			<xs:documentation>Contains detailed information on the pricing of an item</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SourceCost" type="FABSourceCostItem" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Description" type="xs:string" use="required"/>
		<xs:attribute name="CostType" type="FABCostType" use="required"/>
		<xs:attribute name="UnitPrice" type="xs:float" use="required"/>
		<xs:attribute name="Quantity" type="xs:integer" use="required"/>
		<xs:attribute name="PriceCode" type="xs:string" use="required"/>
		<xs:attribute name="ProductType" type="FABPriceType" use="optional"/>
		<xs:attribute name="PriceType" type="FABPriceType" use="optional"/>
	</xs:complexType>
	<xs:complexType name="FABSourceCostItem">
		<xs:annotation>
			<xs:documentation>SourcePrice is the price indicated by the source, SourceCost is the actual cost of the component after discounting, both are the SourceCurrency. UnitCost is the SourceCost but converted to the normalised currency. Unit markup optionally denotes the amount of markup in normalised currency added by Syndicator pricing rules.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SourceUnitPrice" type="xs:float" use="required"/>
		<xs:attribute name="SourceUnitCost" type="xs:float" use="required"/>
		<xs:attribute name="UnitCost" type="xs:float" use="required"/>
		<xs:attribute name="UnitMarkup" type="xs:float" use="optional"/>
	</xs:complexType>
	<xs:complexType name="FABSourceAudit">
		<xs:annotation>
			<xs:documentation>Audit of source pricing all in SourceCurrency. TotalSourcePrice is the total price of components indicated by the Source. TotalSourceCost is the total cost of the sourced components after discounting. SourceProfit is the difference between the 2.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SourceCurrency" type="CurrencyCode" use="required"/>
		<xs:attribute name="TotalSourcePrice" type="xs:float" use="required"/>
		<xs:attribute name="TotalSourceCost" type="xs:float" use="required"/>
		<xs:attribute name="SourceProfit" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABCommisionRule">
		<xs:annotation>
			<xs:documentation>Base Commision Rules are used only if no applicable SupplierCommisionRule or ProductCommisionRule can be found.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="StandardDiscount" type="xs:float" use="required"/>
		<xs:attribute name="SpecialDiscount" type="xs:float" use="required"/>
		<xs:attribute name="StartDate" type="FABDate" use="required"/>
	</xs:complexType>
	<xs:complexType name="ProductCommisionRule">
		<xs:annotation>
			<xs:documentation>Product commission rules define commisoin per product type and are used if no SupplierCommision rule is applicable</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABCommisionRule">
				<xs:attribute name="ProductType" type="FABProductType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SupplierCommisionRule">
		<xs:annotation>
			<xs:documentation>defines commision per supplier</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABCommisionRule">
				<xs:attribute name="Supplier" type="SupplierCode" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AgentCommisionRule">
		<xs:annotation>
			<xs:documentation>defines commision at the point of sale</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABCommisionRule">
				<xs:attribute name="AgentType" type="FABAgentType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FABUser">
		<xs:annotation>
			<xs:documentation>Contains detailed information on the User of the FAB system</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ContactDetails" type="ContactDetails" minOccurs="0"/>
			<xs:element name="PermissionKey" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="EmailAddress" type="xs:string" use="required"/>
		<xs:attribute name="Role" type="FABUserRole" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABPermission">
		<xs:annotation>
			<xs:documentation>Describes a permission. The Key is unique system wide. You can only view/change permissins that have a MinRole less or equal to your role.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Key" type="xs:string" use="required"/>
		<xs:attribute name="Group" type="FABPermissionGroup" use="required"/>
		<xs:attribute name="Description" type="xs:string" use="required"/>
		<xs:attribute name="MinimumRoleForVisibility" type="FABUserRole" use="required"/>
	</xs:complexType>
	<xs:complexType name="FABPermissionList">
		<xs:annotation>
			<xs:documentation>List of permissions in FAB</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Permission" type="FABPermission" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Parameter">
		<xs:annotation>
			<xs:documentation>Generic name/value pair used for parameters</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Value" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="LanguageList">
		<xs:annotation>
			<xs:documentation>List of Language codes, where the first item in the list is the preferred language, the second item the second preferred etc.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Language" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CredentialsList">
		<xs:annotation>
			<xs:documentation>List of SupplierCredentials</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Credentials" type="SupplierCredentials" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierCredentials">
		<xs:annotation>
			<xs:documentation>Associates Username/Password/Logon info with a particular supplier. For viewdata logons, use Username for Abta number.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Parameter" type="Parameter" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="xs:string" use="required"/>
		<xs:attribute name="Username" type="xs:string" use="optional"/>
		<xs:attribute name="Password" type="xs:string" use="optional"/>
		<xs:attribute name="Licence" type="xs:string" use="optional"/>
		<xs:attribute name="Key" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="ErrorConfig">
		<xs:annotation>
			<xs:documentation>Config for defining supplier specific error codes and text</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="StandardErrors" type="StandardErrorSet"/>
		</xs:sequence>
		<xs:attribute name="NotificationEmail" type="xs:string" use="optional" default="errorCodeUpdates@multicom.co.uk"/>
		<xs:attribute name="DisableNotifications" type="xs:boolean" use="required" fixed="false"/>
		<xs:attribute name="UnrecognisedErrorCode" type="xs:string" use="optional"/>
		<xs:attribute name="UnrecognisedStandardErrorText" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:element name="ErrorConfig" type="ErrorConfig"/>
	<xs:complexType name="StandardErrorSet">
		<xs:annotation>
			<xs:documentation>Set of error code rules to match error texts</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="StandardError" type="StandardError" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="StandardError">
		<xs:annotation>
			<xs:documentation>Rule for categorising descriptions and codes of errors</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABStringMatchingRuleSet">
				<xs:attribute name="ErrorCode" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PricingCodeConfig">
		<xs:annotation>
			<xs:documentation>Config for defining pricing codes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierRouteFPCMatchingRules" type="FABStringMatchingRuleSet"/>
			<xs:element name="SpecificSupplierRouteFPCMatchingRules" type="SupplierStringMatchingRules" minOccurs="0"/>
			<xs:element name="DefaultDescriptionRules" type="PriceCodeRuleSet"/>
			<xs:element name="SupplierDescriptionRules" type="SupplierPriceCodeRuleSet" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="NotificationEmail" type="xs:string" use="optional" default="priceDescriptionUpdates@multicom.co.uk"/>
		<xs:attribute name="UnrecognisedPriceCode" type="xs:string" use="optional" default="fab.pc.unknown"/>
	</xs:complexType>
	<xs:element name="PricingCodeConfig" type="PricingCodeConfig"/>
	<xs:complexType name="PriceCodeRuleSet">
		<xs:annotation>
			<xs:documentation>Set of pricing code rules to match cost descriptions or other price codes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Rule" type="PriceCodeMatchingRule" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierPriceCodeRuleSet">
		<xs:annotation>
			<xs:documentation>defines a set of rules for a specifc supplier</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="PriceCodeRuleSet">
				<xs:sequence>
					<xs:element name="SupplierCode" type="SupplierCode" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="Name" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SupplierStringMatchingRules">
		<xs:annotation>
			<xs:documentation>Set of Rules </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierStringMatchingRuleSet" type="SupplierStringMatchingRuleSet" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FABStringMatchingRuleSet">
		<xs:annotation>
			<xs:documentation>Set of Rules for matching on text</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="MatchingRule" type="FABStringMatchingRule" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="SupplierStringMatchingRuleSet">
		<xs:annotation>
			<xs:documentation>Specific string matching rules for a set of suppliers</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABStringMatchingRuleSet">
				<xs:sequence>
					<xs:element name="SupplierCode" type="SupplierCode" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PriceCodeMatchingRule">
		<xs:annotation>
			<xs:documentation>Rule for categorising descriptions and codes of prices</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABStringMatchingRuleSet">
				<xs:attribute name="PriceCode" type="xs:string" use="required"/>
				<xs:attribute name="PriceDescription" type="xs:string" use="optional"/>
				<xs:attribute name="ExtraType" type="FABOptionalExtraType" use="optional"/>
				<xs:attribute name="AppliesTo" type="FABApplyToType" use="optional"/>
				<xs:attribute name="XPathPredicate" type="xs:string" use="optional"/>
				<xs:attribute name="UnitCostMultiplier" type="FABUnitCostMultiplierType" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FABStringMatchingRule">
		<xs:annotation>
			<xs:documentation>A rule for matching text. Can contain a list of exclusion rules which will cause this rule to fail if any match.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSimpleStringMatchingRule">
				<xs:sequence>
					<xs:element name="ExclusionRule" type="FABStringMatchingRule" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FABSimpleStringMatchingRule">
		<xs:annotation>
			<xs:documentation>A simple rule for matching text.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="RuleText" type="xs:string" use="required"/>
		<xs:attribute name="RuleType" type="FABStringMatchingRuleType" use="optional" default="AnyCaseMatch"/>
	</xs:complexType>
	<xs:complexType name="SyndicatorPriceCodeMap">
		<xs:annotation>
			<xs:documentation>Map FABPriceCodes to Syndicator price codes</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="PriceCodeRuleSet"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SupplierTypeMapping">
		<xs:annotation>
			<xs:documentation>Map Supplier Codes to FABSupplierTypes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierCode" type="SupplierCode" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="SupplierType" type="FABSupplierType" use="required"/>
	</xs:complexType>
	<xs:complexType name="SupplierTypeMap">
		<xs:annotation>
			<xs:documentation>Map Supplier Codes to FABSupplierTypes</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierTypeMapping" type="SupplierTypeMapping" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ProductTypeRuleSet">
		<xs:annotation>
			<xs:documentation>Matching rules for determining ProductType</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABStringMatchingRuleSet">
				<xs:attribute name="ProductType" type="FABProductType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SyndicatorExtrasPolicy">
		<xs:annotation>
			<xs:documentation>How does the syndicator want us to handle optional extras</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DefaultPolicy" type="OptionalExtrasPolicy"/>
			<xs:element name="SupplierPolicy" type="SupplierExtrasPolicy" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionalExtrasPolicy">
		<xs:annotation>
			<xs:documentation>How do we handle optional extras</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SuppressExtrasList" type="FABOptionalExtraTypeList" minOccurs="0"/>
			<xs:element name="CustomSuppressionFPCRuleSet" type="FABStringMatchingRuleSet" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="SupressAllExtras" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="FABOptionalExtraTypeList">
		<xs:annotation>
			<xs:documentation>List of FAB Optional Extra Types</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ExtraType" type="FABOptionalExtraType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierExtrasPolicy">
		<xs:annotation>
			<xs:documentation>Extras policy for a set of similar suppliers</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="OptionalExtrasPolicy">
				<xs:sequence>
					<xs:element name="SupplierCode" type="SupplierCode" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="Name" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DiscountRule">
		<xs:annotation>
			<xs:documentation>Match against FPC's to appy a DiscountMultiplier 1.0 will not change the price</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABStringMatchingRuleSet">
				<xs:attribute name="DiscountMultiplier" type="xs:float" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DiscountRuleSet">
		<xs:annotation>
			<xs:documentation>Match against FPC's to appy a DiscountMultiplier 1.0 will not change the price</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DiscountRule" type="DiscountRule" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="DefaultDiscountMultiplier" type="xs:float" use="optional" default="1.0"/>
	</xs:complexType>
	<xs:complexType name="SupplierDiscountRuleSet">
		<xs:annotation>
			<xs:documentation>Match against FPC's to appy a DiscountMultiplier 1.0 will not change the price</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierCode" type="SupplierCode" maxOccurs="unbounded"/>
			<xs:element name="DiscountRuleSet" type="DiscountRuleSet"/>
			<xs:element name="ProductType" type="FABProductType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="DiscountRules">
		<xs:annotation>
			<xs:documentation>Syndicator rules for Discounting and Marking up priced components</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DefaultDiscountRules" type="DiscountRuleSet"/>
			<xs:element name="SupplierDiscountRuleSet" type="SupplierDiscountRuleSet" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PaymentCardDiscountRule">
		<xs:annotation>
			<xs:documentation>PaymentCard markups</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CardType" type="FABPaymentCardType" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="DiscountMultiplier" type="xs:float" use="optional" default="0.0"/>
		<xs:attribute name="Name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="PaymentCardDiscountRuleSet">
		<xs:annotation>
			<xs:documentation>PaymentCard markups</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PaymentCardDiscountRule" type="PaymentCardDiscountRule" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PricingRules">
		<xs:annotation>
			<xs:documentation>Syndicator rules for pricing components</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="DiscountRules" type="DiscountRules" minOccurs="0"/>
			<xs:element name="POSCostComponent" type="HolidayCostComponent" minOccurs="0"/>
			<xs:element name="SupplierPOSCostComponent" type="SupplierPOSCostComponent" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PaymentCardDiscountRuleSet" type="PaymentCardDiscountRuleSet" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SupplierPOSCostComponent">
		<xs:annotation>
			<xs:documentation>Syndicator rules for pricing components</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierCode" type="SupplierCode" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="POSCostComponent" type="HolidayCostComponent"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TODCharge">
		<xs:annotation>
			<xs:documentation>Extra charge incurred when booking date is close to dep date</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Amount" type="xs:float" use="required"/>
		<xs:attribute name="Currency" type="xs:string" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="SupplierTODCharges">
		<xs:annotation>
			<xs:documentation>TOD charges added by supplier if booking date is close to depDate</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierCode" type="SupplierCode" maxOccurs="unbounded"/>
			<xs:element name="TODCharge" type="TODCharge" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="TODMaxDays" type="xs:integer" use="optional" default="13"/>
		<xs:attribute name="ProductType" type="FABProductType" use="optional" default="Undefined"/>
	</xs:complexType>
	<xs:complexType name="TODCharges">
		<xs:annotation>
			<xs:documentation>TOD charges if booking date is close to depDate</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierTODCharges" type="SupplierTODCharges" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CarrierFOIDAllowed">
		<xs:annotation>
			<xs:documentation>Forms of Id allowed by a set of suppliers</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FOIDAllowed" type="FOIDList"/>
		</xs:sequence>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="required"/>
	</xs:complexType>
	<xs:complexType name="AllowedFOIDConfig">
		<xs:annotation>
			<xs:documentation>Forms of Id allowed by FAB suppliers</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CarrierFOIDAllowed" type="CarrierFOIDAllowed" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RegressionTestingConfig">
		<xs:annotation>
			<xs:documentation>Config for internal Regression testing tool</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierCode" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="SyndicatorId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="TestURL" type="xs:string" use="optional" default="http://localhost:9000/FindAndBook"/>
		<xs:attribute name="LiveURL" type="xs:string" use="optional" default="http://loadbalance1.howell.com:9000/FindAndBook"/>
		<xs:attribute name="SimultaneousSessions" type="xs:integer" use="optional" default="1"/>
		<xs:attribute name="BatchSize" type="xs:integer" use="optional" default="30"/>
		<xs:attribute name="DBManager" type="xs:string" use="optional" default="repository"/>
		<xs:attribute name="UseRealTimings" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If true, use timings from the original sessions</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="UnavailableUpdateConfig">
		<xs:annotation>
			<xs:documentation>Config for matching errors that should or should not cause the DB to be updated</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Ignore" type="FABStringMatchingRuleSet" minOccurs="0"/>
			<xs:element name="HolidayUnavailable" type="FABStringMatchingRuleSet" minOccurs="0"/>
			<xs:element name="FlightUnavailable" type="FABStringMatchingRuleSet" minOccurs="0"/>
			<xs:element name="AccommodationUnavailable" type="FABStringMatchingRuleSet" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="NotificationEmail" type="xs:string" use="optional" default="errorCodeUpdates@multicom.co.uk"/>
		<xs:attribute name="UnrecognisedType" type="xs:int" use="optional" default="0"/>
	</xs:complexType>
	<xs:complexType name="PartySearchDetails">
		<xs:annotation>
			<xs:documentation>The initial party size. SearchPartySizeRange in UseCaseConfig determines whether to use these values as actual passenger counts or whether to randomly choose values up to these numbers</xs:documentation>
		</xs:annotation>
		<xs:attribute name="NumAdults" type="OptionalPaxCount" use="optional" default="1"/>
		<xs:attribute name="NumChildren" type="OptionalPaxCount" use="optional" default="0"/>
		<xs:attribute name="NumInfants" type="OptionalPaxCount" use="optional" default="0"/>
	</xs:complexType>
	<xs:complexType name="InconsistentPartySearchDetails">
		<xs:annotation>
			<xs:documentation>For simulating syndicators that search with one party size and then attempt to shortlist a totally different size</xs:documentation>
		</xs:annotation>
		<xs:attribute name="NumAdults" type="OptionalPaxCount" use="optional" default="1"/>
		<xs:attribute name="NumChildren" type="OptionalPaxCount" use="optional" default="0"/>
		<xs:attribute name="NumInfants" type="OptionalPaxCount" use="optional" default="0"/>
	</xs:complexType>
	<xs:element name="UseCaseConfig" type="UseCaseConfig"/>
	<xs:complexType name="UseCaseConfig">
		<xs:annotation>
			<xs:documentation>Config for internal use case testing tool. The prescence of InconsistentPartyDetails overrides the value of SearchPartySizeRange</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PartySearchDetails" type="PartySearchDetails" minOccurs="0"/>
			<xs:element name="InconsistentPartySearchDetails" type="InconsistentPartySearchDetails" minOccurs="0"/>
			<xs:element name="SupplierCodes" type="SupplierList" minOccurs="0"/>
			<xs:element name="DesiredOccupancy" type="OccupancyDetails" minOccurs="0" maxOccurs="9"/>
		</xs:sequence>
		<xs:attribute name="Email" type="xs:string" use="required"/>
		<xs:attribute name="StartDate" type="xs:string" use="optional"/>
		<xs:attribute name="NumRooms" type="xs:integer" use="optional" default="-1"/>
		<xs:attribute name="NumNights" type="xs:integer" use="optional" default="-1"/>
		<xs:attribute name="Resort" type="xs:string" use="optional"/>
		<xs:attribute name="SearchPartySizeRange" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="PollingMode" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="Production" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>
	<xs:complexType name="AdditionalItineraryInfo">
		<xs:annotation>
			<xs:documentation>Additional information that can be added to an Optional Extra to detail information about flights or accommodations that are not currently being booked. Note: No details specified in this section will be booked. The user is responsible for the accuracy of details specified in this section.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelSegments" type="TravelSegmentList" minOccurs="0"/>
			<xs:element name="AccommodationSegments" type="AccommodationSegmentList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SummaryDetail" abstract="true">
		<xs:annotation>
			<xs:documentation>Base class for the summary details</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="Count" type="xs:integer" use="optional"/>
	</xs:complexType>
	<xs:complexType name="Summary" abstract="true">
		<xs:annotation>
			<xs:documentation>A base class for a summary of the associated category</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="SummaryList">
		<xs:annotation>
			<xs:documentation>A list of summaries against the associated category</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Summary" type="Summary" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="StarRatingSummaryDetail">
		<xs:complexContent>
			<xs:extension base="SummaryDetail"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StarRatingSummary">
		<xs:complexContent>
			<xs:extension base="Summary">
				<xs:sequence>
					<xs:element name="StarRatingSummaryDetail" type="StarRatingSummaryDetail" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BoardBasisSummaryDetail">
		<xs:complexContent>
			<xs:extension base="SummaryDetail"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BoardBasisSummary">
		<xs:complexContent>
			<xs:extension base="Summary">
				<xs:sequence>
					<xs:element name="BoardBasisSummaryDetail" type="BoardBasisSummaryDetail" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ResortSummaryDetail">
		<xs:complexContent>
			<xs:extension base="SummaryDetail">
				<xs:attribute name="ResortId" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ResortSummary">
		<xs:complexContent>
			<xs:extension base="Summary">
				<xs:sequence>
					<xs:element name="ResortSummaryDetail" type="ResortSummaryDetail" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationSummaryDetail">
		<xs:complexContent>
			<xs:extension base="SummaryDetail">
				<xs:attribute name="SupplierCode" type="xs:string" use="required"/>
				<xs:attribute name="AccommodationCode" type="xs:string" use="optional"/>
				<xs:attribute name="AccommodationId" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AccommodationSummary">
		<xs:complexContent>
			<xs:extension base="Summary">
				<xs:sequence>
					<xs:element name="AccommodationSummaryDetail" type="AccommodationSummaryDetail" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CruiseSearchResponse">
		<xs:annotation>
			<xs:documentation>A CruiseSearchResponse contains information about the result set of the corresponding request as well as a view into that result set which is a list of cruise objects.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchResponse">
				<xs:sequence>
					<xs:choice>
						<xs:element name="CruisePackageList" type="CruisePackageList">
							<xs:annotation>
								<xs:documentation>CruisePackages that satisfy the constraints of the original request request.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CruisePackageList">
		<xs:annotation>
			<xs:documentation>A list of cruise packages</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CruisePackage" type="CruisePackage" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruisePackage">
		<xs:sequence>
			<xs:element name="CruiseSegments" type="CruiseSegmentList"/>
			<xs:element name="ReturningCustomerDetails" type="Customer" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ComponentId" type="xs:string" use="optional"/>
		<xs:attribute name="ItineraryId" type="xs:string" use="optional"/>
		<xs:attribute name="PackageId" type="xs:string" use="optional"/>
		<xs:attribute name="Duration" type="xs:integer" use="optional"/>
		<xs:attribute name="StartDate" type="FABDate" use="optional"/>
		<xs:attribute name="EndDate" type="FABDate" use="optional"/>
		<xs:attribute name="BasicAdultFare" type="xs:float" use="optional"/>
		<xs:attribute name="Currency" type="xs:string" use="optional" default="GBP"/>
	</xs:complexType>
	<xs:complexType name="CruiseSegmentList">
		<xs:sequence>
			<xs:element name="CruiseSegment" type="CruiseSegment" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruiseSegment">
		<xs:sequence>
			<xs:element name="OccupancyDetails" type="OccupancyDetails" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="CruiseCategories" type="CruiseCategories" minOccurs="0"/>
			<xs:element name="ChosenCruiseCategories" type="CruiseCategories" minOccurs="0"/>
			<xs:element name="CruiseShipDescription" type="CruiseShipDescription" minOccurs="0"/>
			<xs:element name="CruiseShipImages" type="CruiseShipImages" minOccurs="0"/>
			<xs:element name="DeckPlans" type="DeckPlans" minOccurs="0"/>
			<xs:element name="FOIDAllowed" type="FOIDList" minOccurs="0"/>
			<xs:element name="EmbarkPortPoint" type="TravelPoint" minOccurs="0"/>
			<xs:element name="DisembarkPortPoint" type="TravelPoint" minOccurs="0"/>
			<xs:element name="AppliedPricingRules" type="AppliedPricingRules" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="CruiseId" type="xs:string" use="required"/>
		<xs:attribute name="CruiseCode" type="xs:string" use="required"/>
		<xs:attribute name="CruiseName" type="xs:string" use="required"/>
		<xs:attribute name="SupplierCode" type="SupplierCode" use="required"/>
		<xs:attribute name="SupplierName" type="FullSupplierName" use="optional"/>
		<xs:attribute name="Duration" type="xs:integer" use="required"/>
		<xs:attribute name="NumberOfPorts" type="xs:integer" use="optional"/>
		<xs:attribute name="ShipID" type="xs:string" use="required"/>
		<xs:attribute name="ShipName" type="xs:string" use="required"/>
		<xs:attribute name="EmbarkPort" type="PortCode" use="optional"/>
		<xs:attribute name="DisembarkPort" type="PortCode" use="optional"/>
		<xs:attribute name="SupplierEmbarkPort" type="xs:string" use="optional"/>
		<xs:attribute name="SupplierDisembarkPort" type="xs:string" use="optional"/>
		<xs:attribute name="EmbarkDate" type="FABDate" use="required"/>
		<xs:attribute name="DisembarkDate" type="FABDate" use="required"/>
		<xs:attribute name="EmbarkTime" type="FABTime" use="optional"/>
		<xs:attribute name="DisembarkTime" type="FABTime" use="optional"/>
		<xs:attribute name="BasicAdultCost" type="xs:float" use="optional"/>
		<xs:attribute name="Quantity" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="Currency" type="xs:string" use="optional" default="GBP"/>
		<xs:attribute name="ResortId" type="xs:string" use="optional"/>
		<xs:attribute name="RegionName" type="xs:string" use="optional"/>
		<xs:attribute name="PassengerIdRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for PassengerId in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PassengerIdMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket you must provide a value for PassengerId in each Customer attached to the basket. If this is set to false, but PassengerIdRequired is set to true, then FAB is able to book the Itinerary with or without FOID information at the booking stage. However, if no FOID info is provided to FAB, FOID information will normally be required by the supplier PRIOR to departure</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NationalityRequired" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to fully book this itinerary you will need to provide a value for Nationality in each Customer attached to the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NationalityMandatory" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>If this is set to true after creation of the basket then in order to book the basket must provide a value for Nationality in each Customer attached to the basket. If this is set to false, but NationalityRequired is set to true, then FAB is able to book the Itinerary with or without FOID information at the booking stage. However, if no Nationality is provided to FAB,  will normally be required by the supplier PRIOR to departure</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="DiningOptions">
		<xs:sequence>
			<xs:element name="Dining" type="Dining" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DiningGroupRule" type="GroupRule" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Dining">
		<xs:attribute name="DiningId" type="xs:string" use="optional"/>
		<xs:attribute name="Type" type="CruiseDiningType" use="optional"/>
		<xs:attribute name="Name" type="xs:string" use="optional"/>
		<xs:attribute name="Description" type="xs:string" use="optional"/>
		<xs:attribute name="StartTime" type="xs:string" use="optional"/>
		<xs:attribute name="TableSize" type="xs:string" use="optional"/>
		<xs:attribute name="Smoking" type="xs:boolean" use="optional"/>
		<xs:attribute name="DiningRoom" type="xs:string" use="optional"/>
		<xs:attribute name="LanguageCode" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CabinOptions">
		<xs:sequence>
			<xs:element name="OptionalExtra" type="OptionalExtraInfo" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="OptionalExtraGroupRule" type="GroupRule" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruiseSearchRequest">
		<xs:annotation>
			<xs:documentation>Defines the search criteria for searching available cruises</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="RequestTemplate" type="RequestTemplate" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Can be included to dynamically alter the search criteria before carrying out the search</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CabinCriteria" type="CabinCriteria" minOccurs="0"/>
					<xs:element name="ShipCriteria" type="CruiseShipList" minOccurs="0"/>
					<xs:element name="CruiseSearchDetails" type="HolidaySearchDetails"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CruiseShipList">
		<xs:annotation>
			<xs:documentation>A List of desired cruise ships</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CruiseShip" type="CruiseShipRequest" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CabinCriteria">
		<xs:annotation>
			<xs:documentation>Defines the search criteria for searching cabin options.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OccupancyDetails" type="OccupancyDetails" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="CabinType" type="CabinType" use="optional"/>
		<xs:attribute name="FareType" type="xs:string" use="optional"/>
		<xs:attribute name="CategoryType" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="CruiseRegionRequest">
		<xs:annotation>
			<xs:documentation>Defines the search criteria for searching available cruise regions</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SupplierCode" type="SupplierCode" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CruiseDetailRequest">
		<xs:annotation>
			<xs:documentation>Defines the search criteria for searching available cruises</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FABSearchRequest">
				<xs:sequence>
					<xs:element name="RequestTemplate" type="RequestTemplate" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Can be included to dynamically alter the search criteria before carrying out the search</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CruisePackageList" type="CruisePackageList" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- |*| : Post Booking Operation Elements ******************************************************************************************************** -->
	<xs:complexType name="TargetBasketDefinition">
		<xs:annotation>
			<xs:documentation>
				A TargetBasketDefinition contains definitions that define a specific Basket. This can be used in cases where the unique 'BaksetId' of
				the required Basket is not available. Depending on the parameters set; this may or may not result in a single unique Basket result.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetBasketComponentDefinitions" type="TargetBasketComponentDefinition" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Can be used to define a Basket based on the components present in the BAsket.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="ConsumersReference" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
					The client may use their own specified 'unique reference' to uniquely define the 'target basket' of the costing operation. This may not
					uniquely define the target basket if there are client issues with regard to using unique identifiers.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TargetBasketComponentDefinition">
		<xs:annotation>
			<xs:documentation>
				A TargetBasketComponentDefinition references a specified supplier component in a FAB Basket.
				NB: Currently (2011-06-21), it is only possible to reference a 'Booked' component. A target for referencing costed (non-booked') components
				    may be added in the future.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SupplierCode" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The FAB supplier code of the component. This is currently mandatory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="SupplierBookingReference" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
					If the component has previously been 'booked'; the booking reference returned by the supplier.
					This is currently mandatory, but, may be relaxed in the future.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="BookingDate" type="FABDate" use="optional">
			<xs:annotation>
				<xs:documentation>
					If the component has previously been 'booked'; this is the date it was booked.
					This is currently optional, but is advised, as it is used to reduce the chance of conflicting SupplierBookingReference.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<!--
		<xs:attribute name="ComponentReference" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
					This is acting as documentation for a proposed feature in the future. A 'component reference' would be a FAB generated
					reference that can identify a component at the costing stage (before actual booking).
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		-->
	</xs:complexType>
	<xs:complexType name="CostAmendBookedBasketRequest">
		<xs:annotation>
			<xs:documentation>
			You can check the applicability, availability, and cost of amending a booked basket by sending a
			CostAmendBookedBasketRequest. This may add more information to the basket and allow it to proceed
			to a more advanced post booking stage, it can also add items (such as cars and optional extras)
			to the Itinerary within the basket.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<!--
			<xs:element name="TargetBasketDefinition" type="TargetBasketDefinition" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						The target Basket to cost the amendment of can be defined with respect certain specified components contained within the Basket.
						Of course this must correlate with the amendments to be made.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			-->
			<xs:element name="BasketAmendments" type="BasketAmendments" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Full customer details are required before a confirmed costing can be generated for the itinerary</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AdditionalCost" type="HolidayCostComponent" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
					You can add in additional cost components that will be included in the itinerary cost.

					NB: Currently not enabled.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="optional">
			<xs:annotation>
				<xs:documentation>
					This should be used to uniquely define the 'target basket' of the costing operation. When used alone this is guaranteed to target a single
					basket. This will override the presence of a TargetBasketDefinition.

					NB: It is recommended that the FAB BasketId is stored by the client at basket creation to allow post creation operations on the basket.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="optional" default="cost_amendment">
			<xs:annotation>
				<xs:documentation>
					The default value should be used.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>
					If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will
					always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds
					before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then
					get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows
					consumers of the service to poll the basket for updated information.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="AmendBookedBasketRequest">
		<xs:annotation>
			<xs:documentation>
			You can check the applicability, availability, and cost of amending a booked basket by sending a
			CostAmendBookedBasketRequest. This may add more information to the basket and allow it to proceed
			to a more advanced post booking stage, it can also add items (such as cars and optional extras)
			to the Itinerary within the basket.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="BasketAmendments" type="BasketAmendments" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The details of the required changes.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Payment" type="PaymentInfo" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The definition of any payments that must be made in order to commit and perform the amendment.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="optional">
			<xs:annotation>
				<xs:documentation>
					This should be used to uniquely define the 'target basket' of the costing operation. When used alone this is guaranteed to target a single
					basket. This will override the presence of a TargetBasketDefinition.

					NB: It is recommended that the FAB BasketId is stored by the client at basket creation to allow post creation operations on the basket.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="AmendedTotalCost" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>This must match the TotalCost of the itinerary provided the amendment costing response.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="optional" default="booked">
			<xs:annotation>
				<xs:documentation>
					The default value should be used.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>
					If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will
					always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds
					before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then
					get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows
					consumers of the service to poll the basket for updated information.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="CostCancelBookedBasketRequest">
		<xs:annotation>
			<xs:documentation>
			You can check the applicability and cost of cancelling a booked basket by sending a CostCancelBookedBasketRequest.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetBasketDefinition" type="TargetBasketDefinition" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The target Basket to cost the cancellation of can be defined with respect certain specified components contained within the Basket.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AdditionalCost" type="HolidayCostComponent" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>You can add in additional cost components that will be included in the itinerary.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="optional">
			<xs:annotation>
				<xs:documentation>
					This should be used to uniquely define the 'target basket' of the costing operation. When used alone this is guaranteed to target a single
					basket. This will override the presence of a TargetBasketDefinition.

					NB: It is recommended that the FAB BasketId is stored by the client at basket creation to allow post creation operations on the basket.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="optional" default="cost_cancellation">
			<xs:annotation>
				<xs:documentation>
					The default value should be used.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>
					If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will
					always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds
					before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then
					get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows
					consumers of the service to poll the basket for updated information.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="CancelBookedBasketRequest">
		<xs:annotation>
			<xs:documentation>
			This cancels the specified Basket.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Payment" type="PaymentInfo" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The definition of any payments that must be made in order to commit and perform the cancellation.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="BasketId" type="BasketIdType" use="optional">
			<xs:annotation>
				<xs:documentation>
					This should be used to uniquely define the 'target basket' of the costing operation. When used alone this is guaranteed to target a single
					basket. This will override the presence of a TargetBasketDefinition.

					NB: It is recommended that the FAB BasketId is stored by the client at basket creation to allow post creation operations on the basket.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="AmendedTotalCost" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>This must match the TotalCost of the itinerary provided the amendment costing response.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Currency" type="CurrencyCode" use="optional" default="GBP"/>
		<xs:attribute name="TargetBookingStage" type="FABBookingStage" use="optional" default="cancelled">
			<xs:annotation>
				<xs:documentation>
					The default value should be used.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>
				If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will
				always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds
				before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then
				get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows
				consumers of the service to poll the basket for updated information.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="HandoffBasketRequest">
		<xs:annotation>
			<xs:documentation>
				This hands off a costed or booked basket to an external location.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="BasketId" type="BasketIdType">
			<xs:annotation>
				<xs:documentation>
					This should be used to uniquely define the 'target basket' of the hand off.

					NB: It is recommended that the FAB BasketId is stored by the client at basket creation to allow post creation operations on the basket.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ResponseTimeoutSecs" type="xs:nonNegativeInteger" use="optional" default="30">
			<xs:annotation>
				<xs:documentation>
				If the current Basket contains an itinerary that has achieved "confirmed_ cost" or "booked" booking stage  then a Basket request will
				always return immediately unless it is a book message. If that is not the case, the FAB system will wait the indicated amount of seconds
				before returning the current basket, unless the previously indicated state is reached while waiting, in which case the reponse will then
				get returned immediately. A value of 0 seconds will cause the FAB System to respond with the current basket without waiting. This allows
				consumers of the service to poll the basket for updated information.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Reference" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
					The reference for the basket to be handed off to the external location under.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BasketAmendments">
		<xs:annotation>
			<xs:documentation>The set of Basket Amendments.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PartyAmendments" type="PartyAmendments" minOccurs="0"/>
			<xs:element name="TravelSegmentAmendments" type="TravelSegmentAmendments" minOccurs="0"/>
			<xs:element name="AccommodationSegmentAmendments" type="AccommodationSegmentAmendments" minOccurs="0"/>
			<xs:element name="OptionalExtraAmendments" type="OptionalExtraAmendments" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PartyAmendments">
		<xs:annotation>
			<xs:documentation>The set of Party Amendments.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="LeadCustomerAmendment" type="CustomerAmendment" minOccurs="0"/>
			<xs:element name="CustomerAdditions" type="CustomerAdditionList" minOccurs="0"/>
			<xs:element name="CustomerAmendments" type="CustomerAmendmentList" minOccurs="0"/>
			<xs:element name="CustomerCancellations" type="CustomerCancellationList" minOccurs="0"/>
			<xs:element name="TargetItineraryComponents" type="TargetItineraryComponents" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CustomerAdditionList">
		<xs:annotation>
			<xs:documentation>
			List of CustomerAmendment definitions to added to the Basket.
			The target attribute should be left empty.
			Each Customer to be added should be defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddCustomer" type="CustomerAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CustomerAmendmentList">
		<xs:annotation>
			<xs:documentation>
			List of CustomerAmendment definitions to amend in the Basket.
			The target Customer to be amended should be uniquely defined in the target attribute.
			The new Customer definition should be fully defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendCustomer" type="CustomerAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CustomerCancellationList">
		<xs:annotation>
			<xs:documentation>
			List of CustomerAmendment definitions to cancel and remove from the Basket.
			Each Customer to be removed should be defined in the target attribute.
			The amendment attribute should be left empty.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CancelCustomer" type="CustomerAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CustomerAmendment">
		<xs:annotation>
			<xs:documentation>
			Defines a Customer amendment. The target Customer should provide enough information
			to uniquely define the Customer in the Basket that is the target of the amendment.
			The amended Customer definition denotes what the target should be changed too. All
			Customer fields that should be maintained should be passed in the new amended Customer
			definition or they will be lost.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetCustomer" type="Customer" minOccurs="0"/>
			<xs:element name="AmendedCustomer" type="Customer" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TargetCustomerId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelSegmentAmendments">
		<xs:annotation>
			<xs:documentation>The set of TravelSegment Amendments.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelSegmentAdditions" type="TravelSegmentAdditionList" minOccurs="0"/>
			<xs:element name="TravelSegmentAmendments" type="TravelSegmentAmendmentList" minOccurs="0"/>
			<xs:element name="TravelSegmentCancellations" type="TravelSegmentCancellationList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSegmentAdditionList">
		<xs:annotation>
			<xs:documentation>
			List of TravelSegment definitions to add to the Basket.
			The target attribute should be left empty.
			Each TravelSegment to be added should be defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddTravelSegment" type="TravelSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSegmentAmendmentList">
		<xs:annotation>
			<xs:documentation>
			List of TravelSegmentAmendment definitions to amend in the Basket.
			The target TravelSegment to be amended should be uniquely defined in the target attribute.
			The new TravelSegment definition should be fully defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendTravelSegment" type="TravelSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSegmentCancellationList">
		<xs:annotation>
			<xs:documentation>
			List of TravelSegmentAmendment definitions to cancel and remove from the Basket.
			Each TravelSegment to be cancelled should be defined in the target attribute.
			The amendment attribute should be left empty.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CancelTravelSegment" type="TravelSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSegmentAmendment">
		<xs:annotation>
			<xs:documentation>
			Defines a TravelSegment amendment. The target TravelSegment should provide enough information
			to uniquely define the TravelSegment in the Basket that is the target of the amendment, or,
			a unique id for the target.
			The amended TravelSegment definition denotes what the target should be changed too. All
			TravelSegment fields that should be maintained should be passed in the new amended TravelSegment
			definition or they will be lost.
			Alternatively, instead of specifying the full amended TravelSegment, the client may specify
			TravelSubSegmentAmendments to specify the fine grained amendments to any subsegments.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetSegment" type="TravelSegment" minOccurs="0"/>
			<xs:element name="AmendedSegment" type="TravelSegment" minOccurs="0"/>
			<xs:element name="TravelSubSegmentAmendments" type="TravelSubSegmentAmendments" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TargetSegmentId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TravelSubSegmentAmendments">
		<xs:annotation>
			<xs:documentation>The set of TravelSubSegmentAmendments.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TravelSubSegmentAdditions" type="TravelSubSegmentAdditionList" minOccurs="0"/>
			<xs:element name="TravelSubSegmentAmendments" type="TravelSubSegmentAmendmentList" minOccurs="0"/>
			<xs:element name="TravelSubSegmentCancellations" type="TravelSubSegmentCancellationList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSubSegmentAdditionList">
		<xs:annotation>
			<xs:documentation>
			List of TravelSubSegmentAmendment definitions to added to the Basket.
			The target attribute should be left empty.
			Each TravelSubSegmentAmendment to be added should be defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddTravelSubSegment" type="TravelSubSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSubSegmentAmendmentList">
		<xs:annotation>
			<xs:documentation>
			List of TravelSegmentAmendment definitions to amend in the Basket.
			The target TravelSubSegmentAmendment to be amended should be uniquely defined in the target attribute.
			The new TravelSubSegmentAmendment definition should be fully defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendTravelsubSegment" type="TravelSubSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSubSegmentCancellationList">
		<xs:annotation>
			<xs:documentation>
			List of TravelSegmentAmendment definitions to cancel and remove from the Basket.
			Each TravelSubSegmentAmendment to be removed should be defined in the target attribute.
			The amendment attribute should be left empty.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CancelTravelSubSegment" type="TravelSubSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TravelSubSegmentAmendment">
		<xs:annotation>
			<xs:documentation>
			Defines a TravelSubSegment amendment. The target TravelSubSegment should provide enough information
			to uniquely define the target TravelSubSegment in the Basket, or, a unique id provided.
			The amended TravelSubSegment definition denotes what the target should be changed too. All
			TravelSubSegment fields that should be maintained should be passed in the new amended TravelSubSegment
			definition or they will be lost.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetSubSegment" type="TravelSubSegment" minOccurs="0"/>
			<xs:element name="AmendedSubSegment" type="TravelSegment" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TargetSubSegmentId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AccommodationSegmentAmendments">
		<xs:annotation>
			<xs:documentation>The set of TravelSegment Amendments.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationSegmentAdditions" type="AccommodationSegmentAdditionList" minOccurs="0"/>
			<xs:element name="AccommodationAmendments" type="AccommodationSegmentAmendmentList" minOccurs="0"/>
			<xs:element name="AccommodationCancellations" type="AccommodationSegmentCancellationList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationSegmentAdditionList">
		<xs:annotation>
			<xs:documentation>
			List of AccommodationSegment definitions to add to the Basket.
			The target attribute should be left empty.
			Each AccommodationSegment to be added should be defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddAccommodationSegment" type="AccommodationSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationSegmentAmendmentList">
		<xs:annotation>
			<xs:documentation>
			List of AccommodationSegment definitions to amend in the Basket.
			The target AccommodationSegment to be amended should be uniquely defined in the target attribute.
			The new AccommodationSegment definition should be fully defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendAccommodationSegment" type="AccommodationSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationSegmentCancellationList">
		<xs:annotation>
			<xs:documentation>
			List of AccommodationSegment definitions to cancel and remove from the Basket.
			Each AccommodationSegment to be cancelled should be defined in the target attribute.
			The amendment attribute should be left empty.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CancelAccommodationSegment" type="AccommodationSegmentAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationSegmentAmendment">
		<xs:annotation>
			<xs:documentation>
			Defines a AccommodationSegment amendment. The target AccommodationSegment should provide enough information
			to uniquely define the AccommodationSegment in the Basket that is the target of the amendment, or,
			a unique id for the target.
			The amended AccommodationSegment definition denotes what the target should be changed too. All
			AccommodationSegment fields that should be maintained should be passed in the new amended AccommodationSegment
			definition or they will be lost.
			Alternatively, instead of specifying the full amended AccommodationSegment, the client may specify
			TravelSubSegmentAmendments to specify the fine grained amendments to any subsegments.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetSegment" type="AccommodationSegment" minOccurs="0"/>
			<xs:element name="AmendedSegment" type="AccommodationSegment" minOccurs="0"/>
			<xs:element name="AccommodationUnitAmendments" type="AccommodationUnitAmendments" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TargetSegmentId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitAmendments">
		<xs:annotation>
			<xs:documentation>
			The set of AccommodationUnitAmendments. note that these changes affect the ChosenAccommodationUnits in the
			itinerary.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AccommodationUnitAdditions" type="AccommodationUnitAdditionList" minOccurs="0"/>
			<xs:element name="AccommodationUnitAmendments" type="AccommodationUnitAmendmentList" minOccurs="0"/>
			<xs:element name="AccommodationUnitCancellations" type="AccommodationUnitCancellationList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitAdditionList">
		<xs:annotation>
			<xs:documentation>
			List of AccommodationUnitAmendment definitions to added to the Basket.
			The target attribute should be left empty.
			Each AccommodationUnit to be added should be defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddAccommodationUnit" type="AccommodationUnitAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitAmendmentList">
		<xs:annotation>
			<xs:documentation>
			List of AccommodationUnitAmendment definitions to amend in the Basket.
			The target AccommodationUnit to be amended should be uniquely defined in the target attribute.
			The new AccommodationUnit definition should be fully defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendAccommodationUnit" type="AccommodationUnitAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitCancellationList">
		<xs:annotation>
			<xs:documentation>
			List of AccommodationUnitAmendment definitions to cancel and remove from the Basket.
			Each AccommodationUnit to be removed should be defined in the target attribute.
			The amendment attribute should be left empty.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CancelAccommodationUnit" type="AccommodationUnitAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AccommodationUnitAmendment">
		<xs:annotation>
			<xs:documentation>
			Defines a AccommodationUnit amendment. The target AccommodationUnit should provide enough information
			to uniquely define the target AccommodationUnit in the Basket, or, a unique id provided.
			The amended AccommodationUnit definition denotes what the target should be changed too. All
			AccommodationUnit fields that should be maintained should be passed in the new amended AccommodationUnit
			definition or they will be lost.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetAccommodationUnit" type="AccommodationUnit" minOccurs="0"/>
			<xs:element name="AmendedAccommodationUnit" type="AccommodationUnit" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TargetAccommodationUnitId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="OptionalExtraAmendments">
		<xs:annotation>
			<xs:documentation>The set of OptionalExtraAmendment.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="OptionalExtraAdditions" type="OptionalExtraAdditionList" minOccurs="0"/>
			<xs:element name="OptionalExtraAmendments" type="OptionalExtraAmendmentList" minOccurs="0"/>
			<xs:element name="OptionalExtraCancellations" type="OptionalExtraCancellationList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionalExtraAdditionList">
		<xs:annotation>
			<xs:documentation>
			List of OptionalExtraAmendment definitions to added to the Basket.
			The target attribute should be left empty.
			Each OptionalExtra to be added should be defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AddOptionalExtra" type="OptionalExtraAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionalExtraAmendmentList">
		<xs:annotation>
			<xs:documentation>
			List of OptionalExtraAmendment definitions to amend in the Basket.
			The target OptionalExtra to be amended should be uniquely defined in the target attribute.
			The new OptionalExtra definition should be fully defined in the amendment attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="AmendOptionalExtra" type="OptionalExtraAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionalExtraCancellationList">
		<xs:annotation>
			<xs:documentation>
			List of OptionalExtraAmendment definitions to cancel and remove from the Basket.
			Each OptionalExtra to be removed should be defined in the target attribute.
			The amendment attribute should be left empty.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="CancelOptionalExtra" type="OptionalExtraAmendment" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OptionalExtraAmendment">
		<xs:annotation>
			<xs:documentation>
			Defines a OptionalExtra amendment. The target OptionalExtra should provide enough information
			to uniquely define the OptionalExtra in the Basket that is the target of the amendment.
			The amended OptionalExtra definition denotes what the target should be changed too. All
			OptionalExtra fields that should be maintained should be passed in the new amended OptionalExtra
			definition or they will be lost.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetOptionalExtra" type="OptionalExtra" minOccurs="0"/>
			<xs:element name="AmendedOptionalExtra" type="OptionalExtra" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="TargetOptionalExtraId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TargetItineraryComponents">
		<xs:annotation>
			<xs:documentation>
			A set of TargetItineraryComponent.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetItineraryComponent" type="TargetItineraryComponent" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TargetItineraryComponent">
		<xs:annotation>
			<xs:documentation>
			A TargetItineraryComponent should uniquely reference a booked itinerary component in the
			Itinerary. This allows global operations, such as a name change, to be applied against
			a specific supplier booking in the FAB Basket.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="SupplierCode" type="xs:string" use="required"/>
		<xs:attribute name="BookingReference" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="PostBookingPolicyInfo">
		<xs:annotation>
			<xs:documentation>
			This structure contains programmatic definitions of the post-booking options available to the itinerary and booked components.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ItineraryPostBookingPolicy" type="ItineraryPostBookingPolicy" minOccurs="0"/>
			<xs:element name="ComponentPostBookingPolicy" type="ComponentPostBookingPolicy" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ItineraryPostBookingPolicy">
		<xs:annotation>
			<xs:documentation>
			This structure contains programmatic definitions of the post-booking options available to the itinerary. This
			only contains operation definition for operations that are applicable against all booked components in the itinerary
			for the specified date range.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PostBookingMethodCapability" type="PostBookingMethodCapability" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="StartDateTime" type="FABDateTime" use="required"/>
		<xs:attribute name="EndDateTime" type="FABDateTime" use="required"/>
		<xs:attribute name="LastUpdated" type="FABDateTime" use="required"/>
	</xs:complexType>
	<xs:complexType name="ComponentPostBookingPolicy">
		<xs:annotation>
			<xs:documentation>
			This structure contains programmatic definitions of the post-booking options available to an idnetified
			component once booked and any available human readable Terms and Conditions relating to post booking
			operations.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PostBookingPolicyGroup" type="PostBookingPolicyGroup" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Supplier" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The supplier code of the associated booked component in the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ComponentReference" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>If required a reference to the associated component in the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="BookingReference" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>If required the booking reference to the associated booked component in the basket.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PolicyInfoAvailable" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>True if post booking policy info is available for this component.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="PostBookingPolicyGroup">
		<xs:annotation>
			<xs:documentation>
			This structure contains a grouped list of programmatic definitions of the post-booking options.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PostBookingPolicy" type="PostBookingPolicy" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="PolicyType" type="PostBookingPolicyType" use="required">
			<xs:annotation>
				<xs:documentation>The policy type the policies in the group relate to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="PostBookingPolicy">
		<xs:annotation>
			<xs:documentation>
			This structure contains a list of programmatic definitions of the post-booking options.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PolicyDescription" type="PolicyDescription" minOccurs="0"/>
			<xs:element name="PostBookingMethodOptions" type="PostBookingMethodOptions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="IsApplicable" type="xs:boolean" use="required"/>
		<xs:attribute name="PostBookingPolicySource" type="PostBookingPolicySource" use="required"/>
		<xs:attribute name="StartDateTime" type="FABDateTime" use="required"/>
		<xs:attribute name="EndDateTime" type="FABDateTime" use="required"/>
		<xs:attribute name="LastUpdated" type="FABDateTime" use="required"/>
	</xs:complexType>
	<xs:complexType name="PolicyDescription">
		<xs:annotation>
			<xs:documentation>
			This structure contains a set human readable descriptions relating to the post booking
			policy.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PolicyDescItem" type="PolicyDescItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PolicyDescItem">
		<xs:annotation>
			<xs:documentation>
			This structure is a human readable description relating to a post booking policy.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Text" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="PostBookingMethodOptions">
		<xs:annotation>
			<xs:documentation>
			This structure contains a list of programmatic definitions of the available post-booking options.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PostBookingMethodOption" type="PostBookingMethodOption" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PostBookingMethodOption">
		<xs:annotation>
			<xs:documentation>
			Defines the general type of the post booking capability.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PostBookingMethodCapability" type="PostBookingMethodCapability" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="ServiceType" type="ServiceType" use="required"/>
	</xs:complexType>
	<xs:complexType name="PostBookingMethodCapability">
		<xs:annotation>
			<xs:documentation>
			Defines the general type of the post booking capability.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="OperationType" type="OperationType" use="required"/>
		<xs:attribute name="OperationSubjectType" type="EntityType" use="required"/>
		<xs:attribute name="Restriction" type="xs:boolean" use="required"/>
	</xs:complexType>
	<xs:complexType name="RemarkList">
		<xs:annotation>
			<xs:documentation>List of Remarks Customer can provide to FAB at basket booking stage, to be pass over to supplier's PNR system</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Remark" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Voucher">
		<xs:annotation>
			<xs:documentation>Voucher code to be applied against the given supplier, where this is implemented</xs:documentation>
		</xs:annotation>
		<xs:attribute name="VoucherCode" type="xs:string" use="required"/>
		<xs:attribute name="Supplier" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="Handoff">
		<xs:attribute name="Handoff" type="HandoffType" use="required"/>
		<xs:attribute name="ClientSource" type="xs:string" use="optional"/>
		<xs:attribute name="BookingSource" type="xs:string" use="optional"/>
		<xs:attribute name="SecondaryBookingSource" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:simpleType name="HandoffType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="TARSC"/>
			<xs:enumeration value="UNKNOWN"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="LoyaltyInfo">
		<xs:attribute name="Identifier" type="xs:string"/>
		<xs:attribute name="Type" type="LoyaltyInfoType"/>
	</xs:complexType>
	<xs:simpleType name="LoyaltyInfoType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="CoopMembership"/>
			<xs:enumeration value="TagNTrack"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ThirdPartyReference">
		<xs:attribute name="ThirdPartyReferenceProvider" type="ThirdPartyReferenceProvider" use="required"/>
		<xs:attribute name="ThirdPartyCode" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:simpleType name="ThirdPartyReferenceProvider">
		<xs:restriction base="xs:string">
			<xs:enumeration value="TTI"/>
			<xs:enumeration value="GIATA"/>
			<xs:enumeration value="WAVERUNNER"/>
			<xs:enumeration value="TRIPADVISOR"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="AppliedPricingRules">
		<xs:annotation>
			<xs:documentation>
			This structure contains a list of PricingRule objects that describe the list of pricing adjustments applied to the parent object.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PricingRule" type="PricingRule" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PricingRule">
		<xs:attribute name="Name" type="xs:string"/>
		<xs:attribute name="Type" type="PricingRuleType"/>
		<xs:attribute name="AdjustmentAmount" type="xs:float"/>
	</xs:complexType>
	<xs:simpleType name="PricingRuleType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Commission"/>
			<xs:enumeration value="Discount"/>
			<xs:enumeration value="Markup"/>
			<xs:enumeration value="Fee"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="DepotDetails">
		<xs:annotation>
			<xs:documentation>Vehicle depot pickup/dropoff details</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Address" type="Address"/>
		</xs:sequence>
		<xs:attribute name="EmailAddress" type="EmailAddress" use="optional"/>
		<xs:attribute name="Telephone" type="TelephoneNumber" use="optional"/>
		<xs:attribute name="AdditionalInformation" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:simpleType name="TelephoneNumber">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="EmailAddress">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:complexType name="SearchPricingGroup">
		<xs:annotation>
			<xs:documentation>Element that defines how the pricing service should group components when costing</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PricingComponent" type="PricingComponent" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PricingComponent">
		<xs:annotation>
			<xs:documentation>Representation of a component type</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ProductType" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ComponentPricingGroup">
		<xs:annotation>
			<xs:documentation>Element that defines how the pricing service should group components when costing</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PricingComponent" type="PricingComponentGroup" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PricingComponentGroup">
		<xs:annotation>
			<xs:documentation>Defines which other components a component should be priced together with</xs:documentation>
		</xs:annotation>
		<xs:attribute name="ComponentId" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="BaggageAllowance">
		<xs:attribute name="Per" type="Per" use="required"/>
		<xs:attribute name="Unit" type="Unit" use="required"/>
		<xs:attribute name="Quantity" type="xs:integer" use="required"/>
		<xs:attribute name="Type" type="Type" use="required"/>
	</xs:complexType>
	<xs:simpleType name="Per">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Passenger"/>
			<xs:enumeration value="Adult"/>
			<xs:enumeration value="Child"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Unit">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Piece"/>
			<xs:enumeration value="kg"/>
			<xs:enumeration value="lb"/>
			<xs:enumeration value="Unknown"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Type">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Hold"/>
			<xs:enumeration value="Hand"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
